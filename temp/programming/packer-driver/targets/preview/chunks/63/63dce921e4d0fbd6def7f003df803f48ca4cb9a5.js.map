{"version":3,"sources":["file:///D:/cocos%20creator%20project/TeamBattle/assets/resources/scripts/characters/components/MovementComponent.ts"],"names":["_decorator","Component","Vec3","CharacterStats","ccclass","property","MovementComponent","maxForce","slowingRadius","separationWeight","neighborRadius","_velocity","_steeringForce","_targetPosition","_isMoving","_squadMates","start","stats","console","warn","node","name","enabled","setSquadMates","mates","filter","m","isValid","update","deltaTime","calculateSteeringForces","applySteeringToVelocity","updatePosition","updateOrientation","moveTo","targetPosition","clone","stopMovement","lengthSqr","set","getCurrentSpeed","length","isMoving","maxSpeed","moveSpeed","arriveForce","ZERO","arrive","multiplyScalar","normalize","applyForce","rawSeparationForce","separate","weightedSeparationForce","acceleration","add","moveDelta","setWorldPosition","worldPosition","speedThresholdSq","Math","abs","x","currentScaleX","scale","y","z","target","desired","subtract","distance","desiredSpeed","max","steer","neighbors","desiredSeparation","count","otherComp","otherNode","dist","diff","finalSteer","force"],"mappings":"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","sourcesContent":["import { _decorator, Component, Vec3, CCFloat } from 'cc';\nimport { CharacterStats } from './CharacterStats'; // 需要获取移动速度\nimport { IMovable } from '../../common/Interfaces';\n\nconst { ccclass, property } = _decorator;\n\n/**\n * 负责处理角色移动的具体执行。\n * 接收来自 AIComponent 的移动指令。\n * 可以包含操控行为 (Steering Behaviors) 或寻路逻辑。\n */\n@ccclass('MovementComponent')\nexport class MovementComponent extends Component implements IMovable {\n\n    @property(CharacterStats)\n    private stats: CharacterStats = null;\n\n    // --- 操控行为参数 (Steering Behaviors) ---\n    // 这些可以从 CharacterControl 迁移过来或重新设计\n   \n    maxForce: number = 1500;\n\n\n    slowingRadius: number = 100;\n\n  \n    separationWeight: number = 155;\n\n  \n    neighborRadius: number = 250;\n\n    // --- 内部状态 ---\n    private _velocity: Vec3 = new Vec3();\n    private _steeringForce: Vec3 = new Vec3();\n    private _targetPosition: Vec3 | null = null; // AI 请求的目标点\n    private _isMoving: boolean = false;\n    private _squadMates: Component[] = []; // 用于计算分离力\n\n    start() {\n        if (!this.stats) {\n            console.warn(`MovementComponent on [${this.node.name}] requires a CharacterStats component.`);\n            this.enabled = false;\n            return;\n        }\n    }\n\n    /**\n     * 由外部（如 SquadManager 或初始化脚本）设置小队成员列表\n     */\n    public setSquadMates(mates: Component[]) {\n        this._squadMates = mates.filter(m => m !== this && m.isValid);\n    }\n\n    update(deltaTime: number) {\n        if (deltaTime === 0 || !this.enabled || !this.stats) return;\n\n        this.calculateSteeringForces(deltaTime);\n        this.applySteeringToVelocity(deltaTime);\n        this.updatePosition(deltaTime);\n        this.updateOrientation();\n    }\n\n    // --- IMovable Implementation & Control --- (由 AIComponent 调用)\n    public moveTo(targetPosition: Vec3): void {\n        this._targetPosition = targetPosition.clone();\n        this._isMoving = true;\n    }\n\n    public stopMovement(): void {\n        if (!this._targetPosition && this._velocity.lengthSqr() < 0.1*0.1) {\n             return;\n        }\n        this._targetPosition = null;\n        this._isMoving = false;\n        this._velocity.set(0, 0, 0);\n        this._steeringForce.set(0, 0, 0);\n    }\n\n    public getCurrentSpeed(): number {\n        return this._velocity.length();\n    }\n\n    public isMoving(): boolean {\n        // 可以根据速度或是否有目标来判断\n        return this._isMoving && this._velocity.lengthSqr() > 1.0;\n    }\n\n    // --- 内部移动逻辑 (可以沿用或改进 CharacterControl 的逻辑) ---\n\n    private calculateSteeringForces(deltaTime: number) {\n        this._steeringForce.set(0, 0, 0);\n        if (!this._targetPosition && this._velocity.lengthSqr() < 0.01) {\n            return;\n        }\n        const maxSpeed = this.stats.moveSpeed;\n        let arriveForce = Vec3.ZERO;\n        if (this._targetPosition) {\n            arriveForce = this.arrive(this._targetPosition, maxSpeed);\n        } else if (this._velocity.lengthSqr() > 0.01) { \n            arriveForce = this._velocity.clone().multiplyScalar(-1).normalize().multiplyScalar(this.maxForce * 0.5);\n        }\n        this.applyForce(arriveForce);\n\n        if (!this._squadMates) {\n            console.warn(`[${this.node.name} Movement] _squadMates is null or undefined before calling separate!`);\n            this._squadMates = [];\n        }\n        const rawSeparationForce = this.separate(this._squadMates, maxSpeed);\n        \n        const weightedSeparationForce = rawSeparationForce.multiplyScalar(this.separationWeight);\n        this.applyForce(weightedSeparationForce);\n    }\n\n    private applySteeringToVelocity(deltaTime: number) {\n        if (this._velocity.lengthSqr() < 0.01 && this._steeringForce.lengthSqr() < 0.01) {\n             return;\n        }\n        const maxSpeed = this.stats.moveSpeed;\n\n        if (this._steeringForce.lengthSqr() > this.maxForce * this.maxForce) {\n            this._steeringForce.normalize().multiplyScalar(this.maxForce);\n        }\n\n        const acceleration = this._steeringForce.clone().multiplyScalar(deltaTime);\n        this._velocity.add(acceleration);\n\n        if (this._velocity.lengthSqr() > maxSpeed * maxSpeed) {\n            this._velocity.normalize().multiplyScalar(maxSpeed);\n        }\n    }\n\n    private updatePosition(deltaTime: number) {\n        if (this._velocity.lengthSqr() < 0.1*0.1) return; // 速度过小则不移动\n\n        // 计算位移: deltaPos = velocity * deltaTime\n        const moveDelta = this._velocity.clone().multiplyScalar(deltaTime);\n        // 更新世界坐标\n        this.node.setWorldPosition(this.node.worldPosition.clone().add(moveDelta));\n    }\n\n    private updateOrientation() {\n        // 仅在速度足够大时才更新朝向，避免停止时因微小抖动导致晃动\n        const speedThresholdSq = 1.0 * 1.0; // 速度平方阈值，可以调整\n        if (this._velocity.lengthSqr() > speedThresholdSq) {\n            // 根据速度方向更新节点朝向 (左右翻转)\n            if (Math.abs(this._velocity.x) > 0.1) {\n                 // 假设模型默认朝左\n                const currentScaleX = Math.abs(this.node.scale.x);\n                this.node.scale = new Vec3(this._velocity.x < 0 ? currentScaleX : -currentScaleX, this.node.scale.y, this.node.scale.z);\n            }\n        } \n        // else { // 速度小时不更新朝向，保持上一次的朝向\n        //    console.warn(\"Speed too low, skipping orientation update.\");\n        // }\n    }\n\n    // --- 操控行为实现 (从 CharacterControl 迁移并适配) ---\n\n    private arrive(target: Vec3, maxSpeed: number): Vec3 {\n        const desired = target.clone().subtract(this.node.worldPosition);\n        const distance = desired.length();\n\n        if (distance < 1) { // 非常近时直接停止\n            this._velocity.set(0, 0, 0);\n            this._isMoving = false;\n             return Vec3.ZERO;\n        }\n\n        let desiredSpeed = maxSpeed;\n        if (distance < this.slowingRadius) {\n            desiredSpeed = maxSpeed * (distance / this.slowingRadius);\n            desiredSpeed = Math.max(desiredSpeed, 5); // 保证一个最小移动速度\n        }\n\n        desired.normalize().multiplyScalar(desiredSpeed);\n        const steer = desired.subtract(this._velocity);\n        return steer;\n    }\n\n    private separate(neighbors: Component[], maxSpeed: number): Vec3 {\n        const desiredSeparation = this.neighborRadius * 0.8;\n        const steer = new Vec3();\n        let count = 0;\n\n        if (neighbors) { \n            for (const otherComp of neighbors) {\n                if (!otherComp || !otherComp.isValid || !otherComp.node) continue;\n                const otherNode = otherComp.node;\n                const dist = Vec3.distance(this.node.worldPosition, otherNode.worldPosition);\n\n                if (dist > 0 && dist < desiredSeparation) {\n                    const diff = this.node.worldPosition.clone().subtract(otherNode.worldPosition);\n                    diff.normalize();\n                    diff.multiplyScalar(1.0 / dist); \n                    steer.add(diff);\n                    count++;\n                }\n            }\n        }\n\n        if (count > 0) {\n            steer.multiplyScalar(1.0 / count); \n        }\n\n        let finalSteer = Vec3.ZERO.clone(); \n        if (steer.lengthSqr() > 0) {\n            steer.normalize().multiplyScalar(maxSpeed);\n            finalSteer = steer.subtract(this._velocity); \n        }\n        return finalSteer;\n    }\n\n    private applyForce(force: Vec3) {\n        this._steeringForce.add(force);\n    }\n} "]}