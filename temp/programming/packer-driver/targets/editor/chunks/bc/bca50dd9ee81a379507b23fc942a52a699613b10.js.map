{"version":3,"sources":["file:///D:/cocos%20creator%20project/TeamBattle/assets/resources/multTextures/MultTextures.ts"],"names":["approx","assert","BitmapFont","cclegacy","Component","Director","director","EPSILON","Game","game","gfx","ImageAsset","Label","Material","MotionStreak","murmurhash2_32_gc","renderer","resources","Root","Sprite","StencilManager","Texture2D","TiledLayer","DEBUG","EDITOR","JSB","VER","MAX_TEX","SUPPORT_NATIVE","Texture","prototype","texID","isMult","useMult","MultBatch2D","native","enable","parent","incID","count","hash","reset","_image","width","height","_compressed","format","Format","RGBA32F","_data","Float32Array","fill","setFilters","image","addRef","loadMultTextures","load","err","material","mat","builtinResMgr","get","_hash","getHash","endBatcher","batcher","root","batcher2D","_currMaterial","tid","getGFXTexture","cache","cacheTextures","i","setProperty","_cacheUseCount","_cacheMaterials","getMultMaterial","oldMat","rd","MB","isValid","newMat","MaterialInstance","once","EVENT_GAME_INITED","inject_Renderdata","RenderData","UI","matDirty","texDirty","dataDirty","updateHash","bid","chunk","bufferId","hashString","layer","dataHash","hashDirty","textureHash","Object","defineProperty","set","val","isMultTextures","uir","getRenderMaterial","updatePass","comp","call","updateRenderData","frame","passDirty","inject_Label","label","Assembler","getAssembler","assembler","changeUV","undefined","s","renderData","UVs","updateUVs","font","cacheMode","CacheMode","CHAR","ttfSpriteFrame","inject_Sprite","sprite","type","Type","FILLED","fillType","FillType","RADIAL","f0","f1","TILED","spriteFrame","wUV","updateWorldUVData","verUV","updateWorldVertexAndUVData","c","inject_MotionStreak","motionStreak","lateUpdate","dt","_assembler","points","length","inject_TiledLayer","Tiled","setUserNodeDirty","dirty","_render","ui","node","j","_tiledDataArray","_tiledDataArrayIdx","m","info","_drawInfoList","subNodes","forEach","walk","td","texture","isDirty","commitComp","_static","EVENT_ENGINE_INITED","on","EVENT_AFTER_DRAW","Batcher2D","internal","isNative","currMaterial","_currRenderData","_emptyMaterial","Stage_ENTER_LEVEL","Stage_ENTER_LEVEL_INVERTED","transform","bufferID","stencilStage","_insertMaskBatch","sharedManager","stage","depthStencilStateStage","flushBatch","_currHash","_currDepthStencilStateStage","autoMergeBatches","_currComponent","_isMeshBuffer","updateBuffer","vertexFormat","_currTransform","_currLayer","_currTexture","_currSampler","getGFXSampler","_currTextureHash","_currSamplerHash","fillBuffers","caches","fillTextureID","renderDrawInfo","setMaterial","vbuf","vb","uvX","rootProto","oldFrameMove","frameMove","deltaTime","update","getTotalFrames","screens","_screens","screen","scene","_getRenderScene","enabledInHierarchy","_opacityDirty","_pOpacity","_batchRootDepth","resetRenderStates","_batches","clear","level","activeInHierarchy","children","uiProps","_uiProps","render","uiComp","parentOpacity","opacity","selfOpacity","color","a","localOpacity","_opacity","child","postUpdateAssembler","getMaskStackSize","exitMask","_stencilManager","pushMask","enableMask","commitModel","model","_stencilStage","commitIA","renderComp","ia","tex","commitMiddleware","meshBuffer","indexOffset","indexCount","enableBatch","_currIsMiddleware","_middlewareBuffer"],"mappings":"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","sourcesContent":["//*//\nimport { __private, approx, assert, BaseRenderData, BitmapFont, cclegacy, Component, Director, director, EPSILON, Game, game, gfx, ImageAsset, Label, Material, MeshBuffer, MotionStreak, murmurhash2_32_gc, Node, renderer, resources, Root, Sprite, SpriteFrame, StencilManager, Texture2D, TiledLayer, TiledRenderData, UIMeshRenderer, UIRenderer } from 'cc';\nimport { DEBUG, EDITOR, JSB } from 'cc/env';\n\nconst VER = \"2.0.2\";\n\n//最大纹理,固定8张\nconst MAX_TEX = 8\n\n//原生开关,根据需要开启或关闭\nconst SUPPORT_NATIVE = true;\n\n\n//@ts-ignore\ngfx.Texture.prototype.texID = -1; //当前纹理id\n//@ts-ignore\nMaterial.prototype.isMult = false; //多纹理材质的标记\n//@ts-ignore\nComponent.prototype.useMult = false; //组件多纹理开关\n\n\n\nexport const MultBatch2D: any = {\n    native: !SUPPORT_NATIVE && JSB,\n    enable: false,\n    parent: null,\n    incID: 0,\n    count: 0,\n    hash: 0,\n    reset: function () {\n        this.incID += this.count;\n        this.count = 0;\n    }\n};\n\n\nconst _image = new ImageAsset({\n    width: 1,\n    height: 1,\n    _compressed: false,\n    format: gfx.Format.RGBA32F,\n    _data: new Float32Array(4).fill(0),\n});\n\nconst Texture = new Texture2D();\nTexture.setFilters(1, 1);\nTexture.image = _image;\nTexture.addRef();\n\n\n//预加载多纹理材质\nconst loadMultTextures = function () {\n    MultBatch2D.enable = false;\n    resources.load(\"multTextures/Mult-material\", Material, (err, material) => {\n        if (!err) {\n            let mat = cclegacy.builtinResMgr.get('ui-sprite-material');\n            if (mat) {\n                mat._hash = MultBatch2D.hash = Material.getHash(mat);\n                MultBatch2D.parent = material;\n                MultBatch2D.enable = true;\n                material.addRef();\n            }\n        }\n    });\n}\n\n//填补原生纹理数据\nconst endBatcher = function () {\n    if (!JSB) return;\n    let batcher: any = director.root?.batcher2D;\n    if (batcher && batcher.isMult) {\n        let mat = batcher._currMaterial;\n        if (mat && MultBatch2D.count > 0) {\n            let tid = Texture.getGFXTexture();//?.objectID;\n            let cache = batcher.cacheTextures;\n            for (let i = MultBatch2D.count; i < 8; i++) {\n                if (cache[i] !== tid) {\n                    mat.setProperty(\"texture\" + i, Texture);\n                    cache[i] = tid;\n                }\n            }\n        }\n    }\n}\n\n//多纹理材质缓存队列\nlet _cacheUseCount: number = 0;\nlet _cacheMaterials: Array<Material> = [];\nconst getMultMaterial = function (oldMat: any, rd: any = null) {\n\n    let MB = MultBatch2D;\n\n    endBatcher();\n    MB.reset();\n    if (!MB.enable || !oldMat || !rd || !rd.isMult) {\n        return oldMat;\n    }\n\n    if (!MB.parent || !MB.parent.isValid) {\n        loadMultTextures();\n        return oldMat;\n    }\n\n    let newMat: any = _cacheMaterials[_cacheUseCount++];\n    if (!newMat || !newMat.isValid) {\n        let material = { parent: MB.parent };\n        newMat = new renderer.MaterialInstance(material);\n        _cacheMaterials[_cacheUseCount - 1] = newMat;\n        newMat['cacheTextures'] = [];\n        newMat['isMult'] = true;\n        newMat.addRef();\n    }\n\n    return newMat;\n}\n\n\n\n//游戏启动前，务必加载多纹理材质\ngame.once(Game.EVENT_GAME_INITED, () => {\n    if (EDITOR || MultBatch2D.native) return; //|| JSB\n\n    loadMultTextures();\n\n});\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// 多纹理合批，sprite , label , renderdata ，等其他组件的重写和监听\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst inject_Renderdata = function () {\n\n    const RenderData = cclegacy.UI.RenderData.prototype;\n\n    RenderData.texID = -1;\n    RenderData.isMult = false;\n    RenderData.matDirty = true;\n    RenderData.texDirty = true;\n    RenderData.dataDirty = 0x0;\n\n    //兼容多纹理hash计算\n    RenderData.updateHash = function () {\n\n        if (this.isMult && MultBatch2D.enable) {\n            const bid = this.chunk ? this.chunk.bufferId : -1;\n            const hashString = `${bid}${this.layer}` + '98k';\n            this.dataHash = murmurhash2_32_gc(hashString, 666);\n            this.hashDirty = false;\n        } else {\n            const bid = this.chunk ? this.chunk.bufferId : -1;\n            const hashString = `${bid}${this.layer} ${this.textureHash}`;\n            this.dataHash = murmurhash2_32_gc(hashString, 666);\n            this.hashDirty = false;\n        }\n\n        this.matDirty = false;\n    }\n\n    //监听纹理的变更\n    Object.defineProperty(RenderData, \"textureDirty\", {\n        get: function () {\n            return this.texDirty;\n        },\n        set: function (val: boolean) {\n            this.texDirty = val;\n            if (val === true) {\n                this.texID = -1;\n            }\n        }\n    });\n\n\n\n    //检测是否支持多纹理合批\n    const isMultTextures = function (rd: any, uir: UIRenderer) {\n\n        rd.isMult = false;\n        let material: any = uir.getRenderMaterial(0)!\n        if (!material || !MultBatch2D.enable) return;\n\n        //@ts-ignore\n        //组件控制开关 useMult: 可以开启自定义组件参与多纹理\n        //|| uir instanceof Sprite || uir instanceof Label\n        if (uir.useMult) {\n            material._hash = material.hash || material._hash;\n            if (!material._hash) {\n                material._hash = Material.getHash(material);\n            }\n            rd.isMult = (MultBatch2D.hash == material._hash);\n        }\n    }\n\n    //监听pass变更，检测是否多纹理支持\n    const updatePass = RenderData.updatePass;\n    RenderData.updatePass = function (comp: UIRenderer): void {\n        isMultTextures(this, comp);\n        updatePass.call(this, comp);\n    }\n\n    //监听pass变更，检测是否多纹理支持\n    const updateRenderData = RenderData.updateRenderData;\n    RenderData.updateRenderData = function (comp: UIRenderer, frame: any): void {\n        if (this.passDirty) {\n            isMultTextures(this, comp);\n        }\n        //isMultTextures(this, comp);\n        updateRenderData.call(this, comp, frame);\n    }\n\n\n}\n\nconst inject_Label = function () {\n    //@ts-ignore\n    Label.prototype.useMult = true;\n    //监听 Label 的 uv 变更\n    const label = Label.Assembler;\n    if (label) {\n        const getAssembler = label.getAssembler;\n        label.getAssembler = function (comp: Label) {\n            const assembler = getAssembler.call(this, comp);\n            if (assembler.changeUV == undefined) {\n                assembler.changeUV = function (s: any) {\n                    let rd = s.renderData;\n                    rd && (rd.dataDirty = 1);\n                };\n\n                const UVs = assembler.updateUVs;\n                if (UVs) {\n                    if (comp.font instanceof BitmapFont) {\n                        assembler.updateUVs = function (comp: Label) {\n                            UVs.call(this, comp);\n                            this.changeUV(comp);\n                        }\n                    } else if (comp.cacheMode === Label.CacheMode.CHAR) {\n                        assembler.updateUVs = function (comp: Label) {\n                            UVs.call(this, comp);\n                            this.changeUV(comp);\n                        }\n                    } else {\n                        assembler.updateUVs = function (comp: Label) {\n                            UVs.call(this, comp);\n                            const renderData = comp.renderData;\n                            if (!renderData || !comp.ttfSpriteFrame) {\n                                return;\n                            }\n                            this.changeUV(comp);\n                        }\n                    }\n                }\n            }\n\n            return assembler;\n        }\n\n    }\n\n}\n\nconst inject_Sprite = function () {\n    //@ts-ignore\n    Sprite.prototype.useMult = true;\n    //监听 sprite 的 uv 变更\n    const sprite = Sprite.Assembler;\n    if (sprite) {\n        const getAssembler = sprite.getAssembler;\n        sprite.getAssembler = function (comp: Sprite) {\n            const assembler = getAssembler.call(this, comp);\n            if (assembler.changeUV == undefined) {\n                assembler.changeUV = function (s: any) {\n                    let rd = s.renderData;\n                    rd && (rd.dataDirty = 1);\n                };\n\n                const UVs = assembler.updateUVs;\n                if (UVs) {\n                    if (comp.type == Sprite.Type.FILLED) {\n                        if (comp.fillType != Sprite.FillType.RADIAL) {\n                            assembler.updateUVs = function (s: any, f0: number, f1: number) {\n                                UVs.call(this, s, f0, f1);\n                                this.changeUV(s);\n                            }\n                        }\n                    } else {\n                        if (comp.type != Sprite.Type.TILED) {\n                            assembler.updateUVs = function (s: any) {\n                                UVs.call(this, s);\n                                if (s.spriteFrame)\n                                    this.changeUV(s);\n                            }\n                        }\n                    }\n                }\n\n                if (JSB) {\n                    const wUV = assembler.updateWorldUVData;\n                    if (wUV) {\n                        assembler.updateWorldUVData = function (s: any) {\n                            wUV.call(this, s);\n                            this.changeUV(s);\n                        }\n                    }\n                }\n\n                const verUV = assembler.updateWorldVertexAndUVData;\n                if (verUV) {\n                    assembler.updateWorldVertexAndUVData = function (s: any, c: any) {\n                        verUV.call(this, s, c);\n                        this.changeUV(s);\n                    }\n                }\n            }\n\n            return assembler;\n        }\n    }\n}\n\nconst inject_MotionStreak = function () {\n    if (MotionStreak) {\n\n        const motionStreak: any = MotionStreak.prototype;\n        motionStreak.useMult = true; //参与多纹理合批\n\n        const lateUpdate = motionStreak.lateUpdate;\n        motionStreak.lateUpdate = function (dt: number) {\n            lateUpdate.call(this, dt);\n            if (this._assembler) {\n                if (this.points.length >= 2) {\n                    let rd = this.renderData;\n                    //全局标记刷新纹理uv\n                    rd && (rd.dataDirty = 1);\n                }\n            }\n        }\n    }\n}\n\n\nconst inject_TiledLayer = function () {\n    if (TiledLayer && !JSB) {\n\n        const Tiled: any = TiledLayer.prototype;;\n        Tiled.useMult = true; //参与多纹理合批\n        Tiled.dataDirty = false; //全局标记刷新纹理uv\n\n        const setUserNodeDirty = Tiled.setUserNodeDirty\n        Tiled.setUserNodeDirty = function (dirty: boolean) {\n            setUserNodeDirty.call(this, dirty);\n            if (!dirty) {\n                //全局标记刷新纹理uv\n                this.dataDirty = true;\n            }\n        }\n\n        Tiled._render = function (ui: any): void {\n            const layer = this.node.layer;\n            for (let i = 0, j = 0; i < this._tiledDataArray.length; i++) {\n                this._tiledDataArrayIdx = i;\n                const m = this._tiledDataArray[i];\n                const info = this._drawInfoList[j];\n                if (m.subNodes) {\n                    // 提前处理 User Nodes\n                    m.subNodes.forEach((c: any) => {\n                        if (c) {\n                            ui.walk(c.node);\n                            j++;\n                        }\n                    });\n                } else {\n                    const td = m as TiledRenderData;\n                    if (td.texture) {\n\n                        let isDirty = false;\n                        let rd: any = td.renderData!;\n                        rd.material = this.getRenderMaterial(0);\n                        if (rd.texture !== td.texture) {\n                            rd.texture = td.texture;\n                            // isDirty = true;\n                        }\n\n                        if (rd.layer !== layer) {\n                            rd.layer = layer;\n                            isDirty = true;\n                        }\n\n                        rd.isMult = true; //强制参与多纹理\n\n                        // if (JSB) rd._renderDrawInfo = info;\n\n                        //更新renderdata hash\n                        isDirty && rd.updateHash();\n\n                        if (this.dataDirty) rd.dataDirty = 1;\n\n                        // NOTE: 由于 commitComp 只支持单张纹理, 故分多次提交\n                        ui.commitComp(this, td.renderData, td.texture, this._assembler, null);\n\n                        j++;\n\n                    }\n                }\n            }\n\n            this.dataDirty = false;\n            this.node._static = true;\n        }\n    }\n}\n\n\ngame.once(Game.EVENT_ENGINE_INITED, () => {\n    if (EDITOR || MultBatch2D.native) return; //|| JSB\n\n    inject_Label();\n    inject_Sprite();\n    inject_Renderdata();\n    inject_TiledLayer();\n    inject_MotionStreak();\n\n    director.on(Director.EVENT_AFTER_DRAW, (dt) => {\n        MultBatch2D.reset();\n        _cacheUseCount = 0;\n    });\n\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // 多纹理合批，合批核心过程修改\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const Batcher2D: any = cclegacy.internal.Batcher2D.prototype;\n\n    Batcher2D.isMult = false; //多纹理标记\n    Batcher2D.isNative = JSB; //原生的开关\n    Batcher2D.cacheTextures = []; //纹理缓存数据\n    Batcher2D.currMaterial = null;//当前指定材质\n    Object.defineProperty(Batcher2D, \"_currMaterial\", {\n        get: function () {\n            return this.currMaterial;\n        },\n        set: function (material: any) {\n            // if (this.currMaterial === material) return;\n            //检测多纹理材质，接替 _currMaterial\n            let rd = this._currRenderData; //重置检测\n            if (material == this._emptyMaterial) rd = null;\n            this.currMaterial = getMultMaterial(material, rd);\n            this.isMult = false;\n            if (MultBatch2D.enable) {\n                if (this.currMaterial && this.currMaterial.isMult) {\n                    this.cacheTextures = this.currMaterial.cacheTextures;\n                    this.isMult = true; //当前 batcher 多纹理标记\n                }\n            }\n        }\n    });\n\n\n    const Stage_ENTER_LEVEL = 2;\n    const Stage_ENTER_LEVEL_INVERTED = 6;\n    //@ts-ignore\n    type TextureBase = __private._cocos_asset_assets_texture_base__TextureBase;\n    Batcher2D.commitComp = function (comp: UIRenderer, renderData: BaseRenderData | null, frame: TextureBase | SpriteFrame | null, assembler: any, transform: Node | null) {\n\n\n        let dataHash = 0;\n        let mat: any = null;\n        let bufferID = -1;\n\n        if (renderData && renderData.chunk) {\n            if (!renderData.isValid()) return;\n            dataHash = renderData.dataHash;\n            mat = renderData.material;\n            bufferID = renderData.chunk.bufferId;\n        }\n\n        // Notice: A little hack, if it is for mask, not need update here, while control by stencilManger\n        if (comp.stencilStage === Stage_ENTER_LEVEL || comp.stencilStage === Stage_ENTER_LEVEL_INVERTED) {\n            this._insertMaskBatch(comp);\n        } else {\n            comp.stencilStage = StencilManager.sharedManager!.stage;\n        }\n        const depthStencilStateStage = comp.stencilStage;\n\n\n\n        let texID = -1;\n        let texture = null;\n        let MB = MultBatch2D;\n        let flushBatch = false;\n        let isNative = this.isNative;\n        //@ts-ignore\n        if (MB.enable && renderData && renderData.isMult) {\n            if (frame && frame.isValid)\n                texture = frame.getGFXTexture();\n\n            if (texture) {\n\n                //@ts-ignore\n                if (texture.texID === undefined) texture.texID = -1;\n\n                //@ts-ignore\n                texID = texture.texID - MB.incID;\n                flushBatch = texID < 0 && MB.count >= MAX_TEX;\n                if (this.isMult) mat = this._currMaterial;\n            }\n        }\n\n        if (flushBatch\n            || this._currHash !== dataHash || dataHash === 0 || this._currMaterial !== mat\n            || this._currDepthStencilStateStage !== depthStencilStateStage) {\n            // Merge all previous data to a render batch, and update buffer for next render data\n            this.autoMergeBatches(this._currComponent!);\n\n            if (!isNative && renderData && !renderData._isMeshBuffer) {\n                this.updateBuffer(renderData.vertexFormat, bufferID);\n            }\n\n\n            this._currRenderData = renderData;\n            this._currHash = renderData ? renderData.dataHash : 0;\n            this._currComponent = comp;\n            this._currTransform = transform;\n            this._currMaterial = comp.getRenderMaterial(0)!;\n            this._currDepthStencilStateStage = depthStencilStateStage;\n            this._currLayer = comp.node.layer;\n            if (frame) {\n                if (DEBUG) {\n                    assert(frame.isValid, 'frame should not be invalid, it may have been released');\n                }\n                this._currTexture = frame.getGFXTexture();\n                this._currSampler = frame.getGFXSampler();\n                this._currTextureHash = frame.getHash();\n                this._currSamplerHash = this._currSampler.hash;\n            } else {\n                this._currTexture = null;\n                this._currSampler = null;\n                this._currTextureHash = 0;\n                this._currSamplerHash = 0;\n            }\n        }\n\n        if (!isNative) assembler.fillBuffers(comp, this);\n\n\n        if (texture) {\n\n            if (texID < 0 || MB.count === 0) {\n\n                texID = MB.count++;\n                //@ts-ignore\n                //let id = texture.objectID;\n                //@ts-ignore\n                texture.texID = texID + MB.incID;\n\n                let caches = this.cacheTextures;\n                if (caches[texID] !== texture) {\n                    caches[texID] = texture;\n                    //@ts-ignore\n                    texture = frame.texture;\n                    if (!texture) texture = frame;\n                    this._currMaterial.setProperty(\"texture\" + texID, texture);\n\n                }\n            }\n\n            this.fillTextureID(renderData, texID);\n\n            if (isNative) {\n                renderData!.renderDrawInfo.setMaterial(this._currMaterial);\n            }\n\n        }\n\n    }\n\n    //填充多纹理 id 到顶点数据\n    Batcher2D.fillTextureID = function (renderData: any, texID: number) {\n\n        // if (!renderData) return;\n        let vbuf = renderData.chunk.vb;\n        let uvX = 0, length = vbuf.length;\n        if (renderData.dataDirty === 1) {\n            for (let i = 0; i < length; i += 9) {\n                uvX = ~~(vbuf[i + 3] * 100000);\n                vbuf[i + 3] = uvX * 10 + texID;\n            }\n\n        } else {\n            if (renderData.texID !== texID) {\n                for (let i = 0; i < length; i += 9) {\n                    uvX = ~~(vbuf[i + 3] * 0.1);\n                    vbuf[i + 3] = uvX * 10 + texID;\n                }\n            }\n        }\n        renderData.dataDirty = 0;\n        renderData.texID = texID;\n    };\n\n\n\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // 多纹理合批，原生平台支持的修改\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n    if (!EDITOR && JSB) {\n\n        const rootProto: any = Root.prototype;\n        const oldFrameMove = rootProto.frameMove;\n        rootProto.frameMove = function (deltaTime: number) {\n            //@ts-ignore\n            director.root?.batcher2D.update();\n            //director.root?.batcher2D.reset();\n            oldFrameMove.call(this, deltaTime, director.getTotalFrames());\n\n        };\n\n\n        Batcher2D.update = function update() {\n\n            const screens = this._screens;\n            for (let i = 0; i < screens.length; ++i) {\n                const screen = screens[i];\n                const scene = screen._getRenderScene();\n                if (!screen.enabledInHierarchy || !scene) {\n                    continue;\n                }\n\n                // Reset state and walk\n                this._opacityDirty = 0;\n                this._pOpacity = 1;\n                this._batchRootDepth = 0;\n\n                this.walk(screen.node);\n\n                this.resetRenderStates();\n\n            }\n\n            this._batches.clear();\n            this.resetRenderStates();\n            StencilManager.sharedManager!.reset();\n        }\n\n        Batcher2D.walk = function walk(node: Node, level = 0): void {\n            if (!node.activeInHierarchy) {\n                return;\n            }\n            const children = node.children;\n            const uiProps = node._uiProps;\n            const render = uiProps.uiComp as UIRenderer;\n\n\n            // Save opacity\n            const parentOpacity = this._pOpacity;\n            let opacity = parentOpacity;\n            // TODO Always cascade ui property's local opacity before remove it\n            const selfOpacity = render && render.color ? render.color.a / 255 : 1;\n            this._pOpacity = opacity *= selfOpacity * uiProps.localOpacity;\n            // TODO Set opacity to ui property's opacity before remove it\n\n            //@ts-ignore\n            //uiProps.setOpacity(opacity);\n            uiProps._opacity = opacity;\n\n\n            if (!approx(opacity, 0, EPSILON)) {\n\n                // Render assembler update logic\n                if (render && render.enabledInHierarchy) {\n                    render.fillBuffers(this);// for rendering\n                }\n\n                if (children.length > 0 && !node._static) {\n                    for (let i = 0; i < children.length; ++i) {\n                        const child = children[i];\n                        this.walk(child, level);\n                    }\n                }\n            }\n            // Restore opacity\n            this._pOpacity = parentOpacity;\n\n            // Post render assembler update logic\n            // ATTENTION: Will also reset colorDirty inside postUpdateAssembler\n            if (render && render.enabledInHierarchy) {\n                render.postUpdateAssembler(this);\n                if ((render.stencilStage === Stage_ENTER_LEVEL || render.stencilStage === Stage_ENTER_LEVEL_INVERTED)\n                    && (StencilManager.sharedManager!.getMaskStackSize() > 0)) {\n                    this.autoMergeBatches(this._currComponent!);\n                    this.resetRenderStates();\n                    StencilManager.sharedManager!.exitMask();\n                }\n            }\n\n\n            level += 1;\n        }\n\n\n\n        Batcher2D._insertMaskBatch = function (comp: UIRenderer | UIMeshRenderer): void {\n            this.autoMergeBatches(this._currComponent!);\n            this.resetRenderStates();\n            //this._createClearModel();\n            //this._maskClearModel!.node = this._maskClearModel!.transform = comp.node;\n            const _stencilManager = StencilManager.sharedManager!;\n            _stencilManager.pushMask(1);//not need object，only use length\n            //_stencilManager.clear(comp); //invert\n            _stencilManager.enableMask();\n        }\n\n        Batcher2D.commitModel = function (comp: UIMeshRenderer | UIRenderer, model: any, mat: Material | null): void {\n            // if the last comp is spriteComp, previous comps should be batched.\n            if (this._currMaterial !== this._emptyMaterial) {\n                this.autoMergeBatches(this._currComponent!);\n                this.resetRenderStates();\n            }\n\n            if (mat) {\n                // Notice: A little hack, if it is for mask, not need update here, while control by stencilManger\n                if (comp.stencilStage === Stage_ENTER_LEVEL || comp.stencilStage === Stage_ENTER_LEVEL_INVERTED) {\n                    this._insertMaskBatch(comp);\n                } else {\n                    //@ts-ignore\n                    comp._stencilStage = StencilManager.sharedManager!.stage;\n                }\n            }\n\n        }\n\n        Batcher2D.commitIA = function (renderComp: UIRenderer, ia: any, tex?: TextureBase, mat?: Material, transform?: Node): void {\n            // if the last comp is spriteComp, previous comps should be batched.\n            if (this._currMaterial !== this._emptyMaterial) {\n                this.autoMergeBatches(this._currComponent!);\n                this.resetRenderStates();\n            }\n\n            if (renderComp) {\n                //@ts-ignore\n                renderComp._stencilStage = StencilManager.sharedManager!.stage;\n            }\n        }\n\n\n        Batcher2D.commitMiddleware = function (comp: UIRenderer,\n            meshBuffer: MeshBuffer,\n            indexOffset: number,\n            indexCount: number,\n            tex: TextureBase,\n            mat: Material,\n            enableBatch: boolean,\n        ): void {\n\n            this.autoMergeBatches(this._currComponent!);\n            this.resetRenderStates();\n            this._currIsMiddleware = true;\n        }\n\n\n        Batcher2D.autoMergeBatches = function (renderComp?: UIRenderer): void {\n\n            if (this._currIsMiddleware) {\n                // this.mergeBatchesForMiddleware(renderComp!);\n                if (renderComp) {\n                    //@ts-ignore\n                    renderComp._stencilStage = StencilManager.sharedManager!.stage;\n                }\n                this._currIsMiddleware = false;\n                this._middlewareBuffer = null;\n            }\n\n        }\n\n\n        // if (Graphics) {\n        //     const graphics: any = Graphics.prototype;\n        //     graphics.debugDraw = false;\n        //     const _render = graphics._render;\n        //     graphics._render = function (render: any): void {\n        //         if (this.debugDraw) {\n        //             this._isNeedUploadData = false;\n        //         }\n        //         _render.call(this, render);\n        //     }\n        // }\n\n        // if (sp.Skeleton) {\n        //     const Skeleton: any = sp.Skeleton.prototype;\n        //     const _updateDebugDraw = Skeleton._updateDebugDraw;\n        //     Skeleton._updateDebugDraw = function () {\n        //         _updateDebugDraw.call(this);\n        //         if (this._debugRenderer) {\n        //             this._debugRenderer.debugDraw = true;\n        //         }\n        //     }\n        // }\n\n    }\n});\n\n//*/"]}