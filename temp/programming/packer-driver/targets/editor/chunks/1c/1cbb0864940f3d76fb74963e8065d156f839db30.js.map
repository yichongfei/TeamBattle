{"version":3,"sources":["file:///D:/cocos%20creator%20project/TeamBattle/assets/resources/scripts/characters/components/CharacterAnimation.ts"],"names":["_decorator","Component","sp","ccclass","property","requireComponent","CharacterAnimation","Skeleton","spine","currentAnimation","onLoad","getComponent","console","warn","node","name","enabled","start","on","onPlayAnimation","playAnimation","onDestroy","off","animName","loop","animation","findAnimation","setAnimation","setCompleteListener","trackEntry","error"],"mappings":"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","sourcesContent":["import { _decorator, Component, sp } from 'cc';\n\nconst { ccclass, property, requireComponent } = _decorator;\n\n/**\n * 监听动画相关事件 (如 'play-animation') 并控制 Spine (或其他) 动画组件。\n * 需要挂载在与 AIComponent 等相同的节点上。\n */\n@ccclass('CharacterAnimation')\n@requireComponent(sp.Skeleton) // 强制要求节点上有 Spine 组件\nexport class CharacterAnimation extends Component {\n\n    private spine: sp.Skeleton = null;\n    private currentAnimation: string = '';\n\n    onLoad() {\n        this.spine = this.getComponent(sp.Skeleton);\n        if (!this.spine) {\n            console.warn(`CharacterAnimation on [${this.node.name}] requires a sp.Skeleton component.`);\n            this.enabled = false;\n        }\n    }\n\n    start() {\n        if (!this.enabled) return;\n        // 监听来自其他组件的动画播放请求事件\n        this.node.on('play-animation', this.onPlayAnimation, this);\n        // 可以监听更具体的事件，如 'state-changed', 'attack-performed' 等\n\n        // 初始播放待机动画\n        this.playAnimation('idle', true);\n    }\n\n    onDestroy() {\n        // 移除事件监听\n        this.node.off('play-animation', this.onPlayAnimation, this);\n    }\n\n    /**\n     * 处理 'play-animation' 事件。\n     * @param animName 要播放的动画名称\n     * @param loop 是否循环\n     */\n    private onPlayAnimation(animName: string, loop: boolean) {\n        this.playAnimation(animName, loop);\n    }\n\n    /**\n     * 播放指定的 Spine 动画。\n     * @param animName 动画名称\n     * @param loop 是否循环\n     */\n    public playAnimation(animName: string, loop: boolean) {\n        if (!this.spine || !this.enabled) {\n            return;\n        }\n\n        // 检查动画是否存在 (可选但推荐)\n        const animation = this.spine.findAnimation(animName);\n        if (!animation) {\n            console.warn(`[${this.node.name}] Animation [${animName}] not found on sp.Skeleton.`);\n            // 尝试播放默认动画，如 idle\n            if (animName !== 'idle') { // 防止找不到 idle 时无限递归\n                this.playAnimation('idle', true);\n            }\n            return;\n        }\n\n        // 避免不必要的重复设置相同动画 (特别是循环动画)\n        if (this.currentAnimation === animName && loop) {\n            return;\n        }\n\n        try {\n            this.spine.setAnimation(0, animName, loop);\n            this.currentAnimation = animName;\n\n            // 如果是非循环动画，播放完毕后自动切回 idle (或之前的循环动画)\n            if (!loop) {\n                this.spine.setCompleteListener((trackEntry) => {\n                    if (trackEntry.animation.name === animName) {\n                        this.playAnimation('idle', true);\n                        this.spine.setCompleteListener(null); // 清除监听器，避免重复触发\n                    }\n                });\n            } else {\n                 this.spine.setCompleteListener(null); // 清除循环动画的监听器\n            }\n\n        } catch (error) {\n            console.warn(`[${this.node.name}] Error playing animation [${animName}]: ${error}`);\n            // 出错时也尝试播放 idle\n            if (animName !== 'idle') {\n                 this.playAnimation('idle', true);\n            }\n        }\n    }\n} "]}