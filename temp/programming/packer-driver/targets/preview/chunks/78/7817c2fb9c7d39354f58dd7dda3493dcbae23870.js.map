{"version":3,"sources":["file:///D:/cocos%20creator%20project/TeamBattle/assets/resources/scripts/characters/components/AttackComponent.ts"],"names":["_decorator","Component","Vec3","CharacterStats","TargetingComponent","HealthComponent","AttackType","ccclass","property","AttackComponent","_attackTimer","_isAttackReady","_isAttacking","attackCount","start","stats","enabled","targeting","update","deltaTime","tryAttack","startAttacking","stopAttacking","target","getCurrentTarget","targetNode","getNode","isValid","distance","node","worldPosition","attackRange","console","log","name","toFixed","damageableTarget","getComponent","isAlive","performAttack","damageable","attackerStats","attackInterval","Math","max","attackSpeed","emit","baseDamage","getCurrentAttackPower","critChance","getCurrentCritChance","isCrit","random","potentialDamage","critDamageMultiplier","attackType","PHYSICAL","scheduleOnce","currentDamageable","applyDamage","isAttackReady"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3 } from 'cc';\nimport { CharacterStats } from './CharacterStats'; // 获取攻击力、攻速、范围\nimport { TargetingComponent } from './TargetingComponent'; // 获取当前目标\nimport { HealthComponent } from './HealthComponent'; // 对目标造成伤害 (通过 IDamageable)\nimport { ITargetable, IDamageable } from '../../common/Interfaces';\nimport { AttackType } from '../../common/Enums';\n\nconst { ccclass, property } = _decorator;\n\n/**\n * 负责处理角色的普通攻击逻辑。\n * 根据攻速计时，在范围内有有效目标时执行攻击。\n */\n@ccclass('AttackComponent')\nexport class AttackComponent extends Component {\n\n    @property(CharacterStats)\n    private stats: CharacterStats = null;\n\n    @property(TargetingComponent)\n    private targeting: TargetingComponent = null;\n\n    // --- 内部状态 ---\n    private _attackTimer: number = 0;\n    private _isAttackReady: boolean = true;\n    private _isAttacking: boolean = false; // 由 AI 控制是否应该攻击\n    private attackCount: number = 0; // DEBUG: Count attacks\n\n    start() {\n        if (!this.stats) {\n            this.enabled = false;\n            return;\n        }\n        if (!this.targeting) {\n            this.enabled = false;\n            return;\n        }\n    }\n\n    update(deltaTime: number) {\n        if (!this.enabled || !this.stats || !this.targeting) return;\n\n        if (!this._isAttackReady) {\n            this._attackTimer -= deltaTime;\n            if (this._attackTimer <= 0) {\n                this._isAttackReady = true;\n            }\n        }\n\n        if (this._isAttacking) {\n            if (this._isAttackReady) {\n                this.tryAttack();\n            }\n        }\n    }\n\n    // --- 由 AIComponent 调用 ---\n    public startAttacking(): void {\n        if (!this._isAttacking) {\n            this._isAttacking = true;\n        }\n    }\n\n    public stopAttacking(): void {\n        if (this._isAttacking) {\n            this._isAttacking = false;\n        }\n    }\n\n    // --- 内部攻击逻辑 ---\n    private tryAttack(): void {\n        const target = this.targeting.getCurrentTarget();\n        if (!target) return;\n        const targetNode = target.getNode();\n        if (!targetNode || !targetNode.isValid) return;\n\n        const distance = Vec3.distance(this.node.worldPosition, targetNode.worldPosition);\n        if (distance > this.stats.attackRange) {\n            console.log(`[${this.node.name}] tryAttack: FAILED - Target out of range (${distance.toFixed(0)} > ${this.stats.attackRange}).`);\n            return;\n        }\n\n        const damageableTarget = targetNode.getComponent(HealthComponent) as IDamageable;\n        if (!damageableTarget || !damageableTarget.isAlive()) {\n             return;\n        }\n\n        this.performAttack(damageableTarget as unknown as ITargetable);\n    }\n\n    private performAttack(target: ITargetable): void {\n        this.attackCount++;\n        const targetNode = target.getNode();\n        if (!targetNode) return;\n        const damageable = targetNode.getComponent(HealthComponent) as IDamageable;\n        if (!damageable) return;\n        const attackerStats = this.stats;\n        if (!attackerStats) return;\n\n        this._isAttackReady = false;\n        const attackInterval = 1.0 / Math.max(0.1, attackerStats.attackSpeed);\n        this._attackTimer = attackInterval;\n\n        this.node.emit('play-animation', 'attack', false);\n\n        const baseDamage = attackerStats.getCurrentAttackPower(); \n        const critChance = attackerStats.getCurrentCritChance(); \n        const isCrit = Math.random() < critChance;\n        let potentialDamage = baseDamage;\n\n        if (isCrit) {\n            potentialDamage *= attackerStats.critDamageMultiplier;\n        }\n\n        const attackType = AttackType.PHYSICAL;\n\n        this.scheduleOnce(() => {\n             const currentDamageable = targetNode.getComponent(HealthComponent) as IDamageable;\n             if (currentDamageable && currentDamageable.isAlive()) {\n                 currentDamageable.applyDamage(potentialDamage, attackType, isCrit, this.node);\n             } \n        }, 0.1); \n    }\n\n    // --- 公共接口 ---\n    public isAttackReady(): boolean {\n        return this._isAttackReady;\n    }\n} "]}