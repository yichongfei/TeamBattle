{"version":3,"sources":["file:///D:/cocos%20creator%20project/TeamBattle/assets/resources/scripts/characters/components/HealthComponent.ts"],"names":["_decorator","Component","director","AttackType","CharacterStats","ccclass","property","HealthComponent","_currentHealth","_isAlive","start","stats","console","warn","node","name","enabled","maxHealth","log","applyDamage","potentialDamage","type","isCrit","source","targetStats","finalDamage","PHYSICAL","armor","getCurrentArmor","reductionFactor","damageReduction","MAGICAL","TRUE","Math","max","oldHealth","toFixed","emit","targetNode","sourceNode","damage","damageType","isValid","attackerStats","getComponent","attackerHealth","lifestealRatio","getCurrentLifesteal","lifestealAmount","applyHeal","handleDeath","isAlive","amount","healAmount","finalHealAmount","min","actualHealed","getNode","getPosition","worldPosition","killer","getCurrentHealth","getMaxHealth","getHealthPercentage"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAuBC,MAAAA,Q,OAAAA,Q;;AAEnCC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,c,iBAAAA,c;;;;;;;;;AAA0C;AACnD;OAEM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;AAE9B;AACA;AACA;AACA;;iCAEaO,e,WADZF,OAAO,CAAC,iBAAD,C,UAGHC,QAAQ;AAAA;AAAA,2C,2BAHb,MACaC,eADb,SACqCN,SADrC,CAC8F;AAAA;AAAA;;AAAA;;AAK1F;AACA;AAN0F,eAQlFO,cARkF,GAQzD,CARyD;AAAA,eASlFC,QATkF,GAS9D,IAT8D;AAAA;;AAW1FC,QAAAA,KAAK,GAAG;AACJ,cAAI,CAAC,KAAKC,KAAV,EAAiB;AACbC,YAAAA,OAAO,CAACC,IAAR,CAAc,uBAAsB,KAAKC,IAAL,CAAUC,IAAK,wCAAnD;AACA,iBAAKC,OAAL,GAAe,KAAf;AACA;AACH;;AACD,eAAKR,cAAL,GAAsB,KAAKG,KAAL,CAAWM,SAAjC;AACA,eAAKR,QAAL,GAAgB,IAAhB;AACAG,UAAAA,OAAO,CAACM,GAAR,CAAa,IAAG,KAAKJ,IAAL,CAAUC,IAAK,sCAAqC,KAAKP,cAAe,MAAxF;AACH,SApByF,CAsB1F;;;AACAW,QAAAA,WAAW,CAACC,eAAD,EAA0BC,IAA1B,EAA4CC,MAA5C,EAA6DC,MAA7D,EAAkF;AACzF,cAAI,CAAC,KAAKd,QAAV,EAAoB;AAEpB,gBAAMe,WAAW,GAAG,KAAKb,KAAzB;;AACA,cAAI,CAACa,WAAL,EAAkB;AACdZ,YAAAA,OAAO,CAACC,IAAR,CAAc,IAAG,KAAKC,IAAL,CAAUC,IAAK,8EAAhC;AACA;AACH;;AAED,cAAIU,WAAW,GAAGL,eAAlB;;AACA,cAAIC,IAAI,KAAK;AAAA;AAAA,wCAAWK,QAAxB,EAAkC;AAC9B,kBAAMC,KAAK,GAAGH,WAAW,CAACI,eAAZ,EAAd;AACA,kBAAMC,eAAe,GAAG,GAAxB;AACA,kBAAMC,eAAe,GAAGH,KAAK,IAAIA,KAAK,GAAGE,eAAZ,CAA7B;AACAJ,YAAAA,WAAW,GAAGL,eAAe,IAAI,IAAIU,eAAR,CAA7B;AACH,WALD,MAKO,IAAIT,IAAI,KAAK;AAAA;AAAA,wCAAWU,OAAxB,EAAiC,CACpC;AACH,WAFM,MAEA,IAAIV,IAAI,KAAK;AAAA;AAAA,wCAAWW,IAAxB,EAA8B,CACjC;AACH;;AAEDP,UAAAA,WAAW,GAAGQ,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYT,WAAZ,CAAd;AAEA,gBAAMU,SAAS,GAAG,KAAK3B,cAAvB;AACA,eAAKA,cAAL,IAAuBiB,WAAvB;AACA,eAAKjB,cAAL,GAAsByB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,KAAK1B,cAAjB,CAAtB;AAEAI,UAAAA,OAAO,CAACM,GAAR,CAAa,IAAG,KAAKJ,IAAL,CAAUC,IAAK,UAASU,WAAW,CAACW,OAAZ,CAAoB,CAApB,CAAuB,IAAGf,IAAK,kBAAiBC,MAAO,UAAS,KAAKd,cAAL,CAAoB4B,OAApB,CAA4B,CAA5B,CAA+B,IAAGZ,WAAW,CAACP,SAAU,EAAhK;AAEAf,UAAAA,QAAQ,CAACmC,IAAT,CAAc,sBAAd,EAAsC;AAClCC,YAAAA,UAAU,EAAE,KAAKxB,IADiB;AAElCyB,YAAAA,UAAU,EAAEhB,MAFsB;AAGlCiB,YAAAA,MAAM,EAAEf,WAH0B;AAIlCgB,YAAAA,UAAU,EAAEpB,IAJsB;AAKlCC,YAAAA,MAAM,EAAEA;AAL0B,WAAtC;;AAQA,cAAIG,WAAW,GAAG,CAAd,IAAmBF,MAAnB,IAA6BA,MAAM,CAACmB,OAAxC,EAAiD;AAC7C,kBAAMC,aAAa,GAAGpB,MAAM,CAACqB,YAAP;AAAA;AAAA,iDAAtB;AACA,kBAAMC,cAAc,GAAGtB,MAAM,CAACqB,YAAP,CAAoBrC,eAApB,CAAvB;;AACA,gBAAIoC,aAAa,IAAIE,cAArB,EAAqC;AACjC,oBAAMC,cAAc,GAAGH,aAAa,CAACI,mBAAd,EAAvB;;AACA,kBAAID,cAAc,GAAG,CAArB,EAAwB;AACpB,sBAAME,eAAe,GAAGvB,WAAW,GAAGqB,cAAtC;AACAD,gBAAAA,cAAc,CAACI,SAAf,CAAyBD,eAAzB,EAA0C,KAAKlC,IAA/C;AACH;AACJ;AACJ;;AAED,cAAIqB,SAAS,GAAG,CAAZ,IAAiB,KAAK3B,cAAL,IAAuB,CAA5C,EAA+C;AAC3C,iBAAK0C,WAAL,CAAiB3B,MAAjB;AACH;AACJ;;AAED4B,QAAAA,OAAO,GAAY;AACf,iBAAO,KAAK1C,QAAZ;AACH,SA/EyF,CAiF1F;;;AACAwC,QAAAA,SAAS,CAACG,MAAD,EAAiB7B,MAAjB,EAAsC;AAC3C,cAAI,CAAC,KAAKd,QAAN,IAAkB,CAAC,KAAKE,KAAxB,IAAiC,KAAKH,cAAL,IAAuB,KAAKG,KAAL,CAAWM,SAAvE,EAAkF;AAElF,gBAAMoC,UAAU,GAAGpB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYkB,MAAZ,CAAnB;AACA,gBAAME,eAAe,GAAGD,UAAxB;AAEA,gBAAMlB,SAAS,GAAG,KAAK3B,cAAvB;AACA,eAAKA,cAAL,GAAsByB,IAAI,CAACsB,GAAL,CAAS,KAAK5C,KAAL,CAAWM,SAApB,EAA+B,KAAKT,cAAL,GAAsB8C,eAArD,CAAtB;AACA,gBAAME,YAAY,GAAG,KAAKhD,cAAL,GAAsB2B,SAA3C;;AAEA,cAAIqB,YAAY,GAAG,GAAnB,EAAwB;AAAA;;AACpB5C,YAAAA,OAAO,CAACM,GAAR,CAAa,IAAG,KAAKJ,IAAL,CAAUC,IAAK,cAAayC,YAAY,CAACpB,OAAb,CAAqB,CAArB,CAAwB,kBAAxD,gBAAyEb,MAAzE,oBAAyEA,MAAM,CAAER,IAAjF,2BAAyF,SAAU,UAAS,KAAKP,cAAL,CAAoB4B,OAApB,CAA4B,CAA5B,CAA+B,IAAG,KAAKzB,KAAL,CAAWM,SAAU,EAA/K;AACAf,YAAAA,QAAQ,CAACmC,IAAT,CAAc,oBAAd,EAAoC;AAChCC,cAAAA,UAAU,EAAE,KAAKxB,IADe;AAEhCyB,cAAAA,UAAU,EAAEhB,MAFoB;AAGhC8B,cAAAA,UAAU,EAAEG;AAHoB,aAApC;AAKH;AACJ,SApGyF,CAsG1F;;;AACAC,QAAAA,OAAO,GAAS;AACZ,iBAAO,KAAK3C,IAAZ;AACH;;AAED4C,QAAAA,WAAW,GAAS;AAChB,iBAAO,KAAK5C,IAAL,CAAU6C,aAAjB;AACH,SA7GyF,CA+G1F;;;AACQT,QAAAA,WAAW,CAACU,MAAD,EAAsB;AACrC,cAAI,CAAC,KAAKnD,QAAV,EAAoB;AAEpB,eAAKA,QAAL,GAAgB,KAAhB;AACAG,UAAAA,OAAO,CAACM,GAAR,CAAa,IAAG,KAAKJ,IAAL,CAAUC,IAAK,aAA/B;AAEA,eAAKD,IAAL,CAAUuB,IAAV,CAAe,gBAAf,EAAiCuB,MAAjC;AACA,eAAK9C,IAAL,CAAUuB,IAAV,CAAe,gBAAf,EAAiC,KAAjC,EAAwC,KAAxC;AACH,SAxHyF,CA0H1F;;;AACOwB,QAAAA,gBAAgB,GAAW;AAC9B,iBAAO,KAAKrD,cAAZ;AACH;;AAEMsD,QAAAA,YAAY,GAAW;AAC1B,iBAAO,KAAKnD,KAAL,GAAa,KAAKA,KAAL,CAAWM,SAAxB,GAAoC,CAA3C;AACH;;AAEM8C,QAAAA,mBAAmB,GAAW;AACjC,cAAI,CAAC,KAAKpD,KAAN,IAAe,KAAKA,KAAL,CAAWM,SAAX,IAAwB,CAA3C,EAA8C,OAAO,CAAP;AAC9C,iBAAO,KAAKT,cAAL,GAAsB,KAAKG,KAAL,CAAWM,SAAxC;AACH;;AAtIyF,O;;;;;iBAG1D,I","sourcesContent":["import { _decorator, Component, Node, Vec3, director } from 'cc';\nimport { IDamageable, IHealable, ITargetable } from '../../common/Interfaces';\nimport { AttackType, CharacterState } from '../../common/Enums';\nimport { CharacterStats } from './CharacterStats'; // 可能需要获取最大生命值\n// import { AIComponent } from '../ai/AIComponent'; // 可能需要通知 AI 死亡\n\nconst { ccclass, property } = _decorator;\n\n/**\n * 管理角色的生命值、受伤、治疗和死亡逻辑。\n * 实现 IDamageable, IHealable 和 ITargetable 接口。\n */\n@ccclass('HealthComponent')\nexport class HealthComponent extends Component implements IDamageable, IHealable, ITargetable {\n\n    @property(CharacterStats)\n    private stats: CharacterStats = null;\n\n    // @property(AIComponent) // 或者通过事件通知\n    // private aiComponent: AIComponent = null;\n\n    private _currentHealth: number = 0;\n    private _isAlive: boolean = true;\n\n    start() {\n        if (!this.stats) {\n            console.warn(`HealthComponent on [${this.node.name}] requires a CharacterStats component.`);\n            this.enabled = false;\n            return;\n        }\n        this._currentHealth = this.stats.maxHealth;\n        this._isAlive = true;\n        console.log(`[${this.node.name}] HealthComponent initialized with ${this._currentHealth} HP.`);\n    }\n\n    // --- IDamageable Implementation ---\n    applyDamage(potentialDamage: number, type: AttackType, isCrit: boolean, source?: Node): void {\n        if (!this._isAlive) return;\n\n        const targetStats = this.stats;\n        if (!targetStats) {\n            console.warn(`[${this.node.name}] HealthComponent missing CharacterStats. Cannot calculate damage reduction.`);\n            return;\n        }\n\n        let finalDamage = potentialDamage;\n        if (type === AttackType.PHYSICAL) {\n            const armor = targetStats.getCurrentArmor();\n            const reductionFactor = 500;\n            const damageReduction = armor / (armor + reductionFactor);\n            finalDamage = potentialDamage * (1 - damageReduction);\n        } else if (type === AttackType.MAGICAL) {\n            // TODO: 实现基于魔法抗性的减伤\n        } else if (type === AttackType.TRUE) {\n            // 真实伤害无视防御和抗性\n        }\n\n        finalDamage = Math.max(0, finalDamage);\n\n        const oldHealth = this._currentHealth;\n        this._currentHealth -= finalDamage;\n        this._currentHealth = Math.max(0, this._currentHealth);\n\n        console.log(`[${this.node.name}] took ${finalDamage.toFixed(0)} ${type} damage (Crit: ${isCrit}), HP: ${this._currentHealth.toFixed(0)}/${targetStats.maxHealth}`);\n\n        director.emit('final-damage-applied', {\n            targetNode: this.node,\n            sourceNode: source,\n            damage: finalDamage,\n            damageType: type,\n            isCrit: isCrit,\n        });\n\n        if (finalDamage > 0 && source && source.isValid) {\n            const attackerStats = source.getComponent(CharacterStats);\n            const attackerHealth = source.getComponent(HealthComponent);\n            if (attackerStats && attackerHealth) {\n                const lifestealRatio = attackerStats.getCurrentLifesteal();\n                if (lifestealRatio > 0) {\n                    const lifestealAmount = finalDamage * lifestealRatio;\n                    attackerHealth.applyHeal(lifestealAmount, this.node);\n                }\n            }\n        }\n\n        if (oldHealth > 0 && this._currentHealth <= 0) {\n            this.handleDeath(source);\n        }\n    }\n\n    isAlive(): boolean {\n        return this._isAlive;\n    }\n\n    // --- IHealable Implementation ---\n    applyHeal(amount: number, source?: Node): void {\n        if (!this._isAlive || !this.stats || this._currentHealth >= this.stats.maxHealth) return;\n\n        const healAmount = Math.max(0, amount);\n        const finalHealAmount = healAmount;\n\n        const oldHealth = this._currentHealth;\n        this._currentHealth = Math.min(this.stats.maxHealth, this._currentHealth + finalHealAmount);\n        const actualHealed = this._currentHealth - oldHealth;\n\n        if (actualHealed > 0.1) {\n            console.log(`[${this.node.name}] received ${actualHealed.toFixed(0)} healing from [${source?.name ?? 'Unknown'}], HP: ${this._currentHealth.toFixed(0)}/${this.stats.maxHealth}`);\n            director.emit('final-heal-applied', {\n                targetNode: this.node,\n                sourceNode: source,\n                healAmount: actualHealed,\n            });\n        }\n    }\n\n    // --- ITargetable Implementation ---\n    getNode(): Node {\n        return this.node;\n    }\n\n    getPosition(): Vec3 {\n        return this.node.worldPosition;\n    }\n\n    // --- 死亡处理 ---\n    private handleDeath(killer?: Node): void {\n        if (!this._isAlive) return;\n\n        this._isAlive = false;\n        console.log(`[${this.node.name}] has died.`);\n\n        this.node.emit('character-died', killer);\n        this.node.emit('play-animation', 'die', false);\n    }\n\n    // --- 公共接口 (Getter) ---\n    public getCurrentHealth(): number {\n        return this._currentHealth;\n    }\n\n    public getMaxHealth(): number {\n        return this.stats ? this.stats.maxHealth : 0;\n    }\n\n    public getHealthPercentage(): number {\n        if (!this.stats || this.stats.maxHealth <= 0) return 0;\n        return this._currentHealth / this.stats.maxHealth;\n    }\n} "]}