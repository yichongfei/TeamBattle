{"version":3,"sources":["file:///D:/cocos%20creator%20project/TeamBattle/assets/resources/scripts/pop/popuplabel/popup-label-assembler.ts"],"names":["PopUpLabelAssembler","Color","Mat4","dynamicAtlasManager","lerp","LabelAnimRuntimeInfo","m","createData","comp","renderData","requestRenderData","updateRenderData","frame","spriteFrame","packToDynamicAtlas","vertDirty","updateVertexData","updateUVs","updateColor","fillBuffers","renderer","chunk","vData","vb","dataList","data","node","stride","floatStride","length","getWorldMatrix","vertexOffset","i","vert","x","y","rhw","m03","m07","m15","m00","m04","m12","m01","m05","m13","m02","m06","m14","u","v","toArray","color","vidOrigin","meshBuffer","ib","iData","indexOffset","vid","vertexCount","anims","reduce","pre","current","text","indexCount","clear","dataLength","resize","letterCount","forEach","anim","scale","baseX","position","baseY","letterIndex","len","layout","LetterOffset","w","h","offsetx","offsety","dataDirty","uv","uv_l","uv_r","uv_b","uv_t","tw","originalSize","width","th","height","d0","d1","d2","d3","set","popUpLabelAssembler"],"mappings":"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","sourcesContent":["import { Color, IAssembler, Mat4, dynamicAtlasManager, lerp } from \"cc\";\nimport { LabelAnimRuntimeInfo } from \"./label-anim-runtime-data\";\nimport { PopUpLabel } from \"./popup-label\";\n\nconst m = new Mat4();\n\nclass PopUpLabelAssembler implements IAssembler {\n    createData(comp: PopUpLabel) {\n        const renderData = comp.requestRenderData();\n        return renderData;\n    }\n\n    updateRenderData(comp: PopUpLabel) {\n        const frame = comp.spriteFrame;\n        dynamicAtlasManager.packToDynamicAtlas(comp, frame);\n        const renderData = comp.renderData;\n        if (renderData && frame) {\n            if (renderData.vertDirty) {\n                this.updateVertexData(comp);\n            }\n            this.updateUVs(comp);\n            this.updateColor(comp);\n            renderData.updateRenderData(comp, frame);\n        }\n    }\n\n    fillBuffers(comp: PopUpLabel, renderer: any) {\n        const renderData = comp.renderData!;\n        const chunk = renderData.chunk;\n        const vData = chunk.vb;\n        const dataList = renderData.data;\n        const node = comp.node;\n        const stride = renderData.floatStride;\n        const length = dataList.length;\n\n        node.getWorldMatrix(m);\n        let vertexOffset = 0;\n        for (let i = 0; i < length; i++) {\n            const vert = dataList[i];\n            const x = vert.x;\n            const y = vert.y;\n            let rhw = m.m03 * x + m.m07 * y + m.m15;\n            rhw = rhw ? 1 / rhw : 1;\n\n            vertexOffset = i * stride;\n            vData[vertexOffset + 0] = (m.m00 * x + m.m04 * y + m.m12) * rhw;\n            vData[vertexOffset + 1] = (m.m01 * x + m.m05 * y + m.m13) * rhw;\n            vData[vertexOffset + 2] = (m.m02 * x + m.m06 * y + m.m14) * rhw;\n            vData[vertexOffset + 3] = vert.u;\n            vData[vertexOffset + 4] = vert.v;\n            Color.toArray(vData, vert.color, vertexOffset + 5);\n        }\n\n        const vidOrigin = chunk.vertexOffset;\n        const meshBuffer = chunk.meshBuffer;\n        const ib = chunk.meshBuffer.iData;\n        let indexOffset = meshBuffer.indexOffset;\n        for (let v = 0; v < length / 4; v++) {\n            const vid = vidOrigin + v * 4;\n            ib[indexOffset++] = vid + 0;\n            ib[indexOffset++] = vid + 1;\n            ib[indexOffset++] = vid + 2;\n            ib[indexOffset++] = vid + 0;\n            ib[indexOffset++] = vid + 2;\n            ib[indexOffset++] = vid + 3;\n            meshBuffer.indexOffset += 6;\n        }\n    }\n\n    /**\n     * font text / uv cord:\n     * \n     * 0 — x\n     * |\n     * y\n     * \n     * ui cord:\n     * \n     *       y\n     *       |\n     * -x — 0 — x\n     *       |\n     *      -y\n     */\n    updateVertexData(comp: PopUpLabel) {\n        const renderData = comp.renderData;\n        const vertexCount = comp.anims.reduce((pre, current) => {\n            return pre + current.data.text.length;\n        }, 0) * 4;\n        const indexCount = vertexCount * 3 / 2;\n\n        renderData.clear();\n        renderData.dataLength = vertexCount;\n        renderData.resize(vertexCount, indexCount);\n\n        let letterCount = 0;\n        comp.anims.forEach((anim) => {\n            const scale = anim.current.scale;\n            const baseX = anim.current.position.x;\n            const baseY = anim.current.position.y;\n            for (let letterIndex = 0; letterIndex < anim.len; letterIndex++, letterCount++) {\n                const x = scale * anim.layout[letterIndex * LabelAnimRuntimeInfo.LetterOffset + 0];\n                const y = scale * anim.layout[letterIndex * LabelAnimRuntimeInfo.LetterOffset + 1];\n                const w = scale * anim.layout[letterIndex * LabelAnimRuntimeInfo.LetterOffset + 2];\n                const h = scale * anim.layout[letterIndex * LabelAnimRuntimeInfo.LetterOffset + 3];\n                const offsetx = scale * anim.layout[letterIndex * LabelAnimRuntimeInfo.LetterOffset + 4];\n                const offsety = scale * anim.layout[letterIndex * LabelAnimRuntimeInfo.LetterOffset + 5];\n\n                renderData.data[letterCount * 4 + 0].x = baseX + offsetx;\n                renderData.data[letterCount * 4 + 0].y = baseY - (offsety + h);\n\n                renderData.data[letterCount * 4 + 1].x = baseX + offsetx + w;\n                renderData.data[letterCount * 4 + 1].y = baseY - (offsety + h);\n\n                renderData.data[letterCount * 4 + 2].x = baseX + offsetx + w;\n                renderData.data[letterCount * 4 + 2].y = baseY - offsety;\n\n                renderData.data[letterCount * 4 + 3].x = baseX + offsetx;\n                renderData.data[letterCount * 4 + 3].y = baseY - offsety;\n            }\n        });\n\n        renderData.vertDirty = false;\n    }\n\n    updateUVs(comp: PopUpLabel) {\n        const renderData = comp.renderData;\n        if (!renderData.data.length) {\n            return;\n        }\n        //@ts-ignore\n        renderData.dataDirty = 1;\n        /** 01  11  00  10 */\n        const uv = comp.spriteFrame.uv;\n        const uv_l = uv[0];\n        const uv_r = uv[2];\n        const uv_b = uv[1];\n        const uv_t = uv[5];\n        const tw = comp.spriteFrame.originalSize.width;\n        const th = comp.spriteFrame.originalSize.height;\n        let letterCount = 0;\n        comp.anims.forEach((anim) => {\n            for (let letterIndex = 0; letterIndex < anim.len; letterIndex++, letterCount++) {\n                const x = anim.layout[letterIndex * LabelAnimRuntimeInfo.LetterOffset + 0];\n                const y = anim.layout[letterIndex * LabelAnimRuntimeInfo.LetterOffset + 1];\n                const w = anim.layout[letterIndex * LabelAnimRuntimeInfo.LetterOffset + 2];\n                const h = anim.layout[letterIndex * LabelAnimRuntimeInfo.LetterOffset + 3];\n\n                const d0 = renderData.data[letterCount * 4 + 0];\n                const d1 = renderData.data[letterCount * 4 + 1];\n                const d2 = renderData.data[letterCount * 4 + 2];\n                const d3 = renderData.data[letterCount * 4 + 3];\n\n                d0.u = lerp(uv_l, uv_r, x / tw);\n                d0.v = lerp(uv_t, uv_b, (y + h) / th);\n\n                d1.u = lerp(uv_l, uv_r, (x + w) / tw);\n                d1.v = lerp(uv_t, uv_b, (y + h) / th);\n\n                d2.u = lerp(uv_l, uv_r, (x + w) / tw);\n                d2.v = lerp(uv_t, uv_b, y / th);\n\n                d3.u = lerp(uv_l, uv_r, x / tw);\n                d3.v = lerp(uv_t, uv_b, y / th);\n            }\n        });\n    }\n\n    updateColor(comp: PopUpLabel) {\n        const renderData = comp.renderData;\n        if (!renderData.data.length) {\n            return;\n        }\n        let letterCount = 0;\n        comp.anims.forEach((anim) => {\n            const color = anim.current.color;\n            for (let letterIndex = 0; letterIndex < anim.len; letterIndex++, letterCount++) {\n                renderData.data[letterCount * 4 + 0].color.set(color);\n                renderData.data[letterCount * 4 + 1].color.set(color);\n                renderData.data[letterCount * 4 + 2].color.set(color);\n                renderData.data[letterCount * 4 + 3].color.set(color);\n            }\n        });\n    }\n}\n\nexport const popUpLabelAssembler = new PopUpLabelAssembler();"]}