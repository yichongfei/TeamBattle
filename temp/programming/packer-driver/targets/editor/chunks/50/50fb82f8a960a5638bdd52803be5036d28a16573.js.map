{"version":3,"sources":["file:///D:/cocos%20creator%20project/TeamBattle/assets/resources/scripts/damage/DamageControl.ts"],"names":["_decorator","Component","Vec3","find","UITransform","Color","director","LabelAnimData","ObjectPool","PopUpLabel","DamageSystemAttackType","AttackType","ccclass","property","PopupType","DamageControl","baseFontScale","critFontScale","popupDuration","popupMoveEase","popupEndScaleFactor","popupDriftHeight","getInstance","_instance","getComponent","console","error","onDestroy","off","handleDamageEvent","handleHealEvent","start","damagePopup","on","log","setPopUpLabel","popupLabel","eventData","targetNode","damage","popupType","isCrit","damageType","PHYSICAL","CritPhysicalDamage","CritMagicDamage","PhysicalDamage","MagicDamage","TRUE","TrueDamage","damageStr","Math","round","toString","showNumberPopup","healAmount","healStr","Heal","numberStr","isValid","uiTransTarget","headOffset","height","worldPos","convertToWorldSpaceAR","uiTransPopup","node","localPos","convertToNodeSpaceAR","anim","allocate","text","duration","ease","displayColor","getPopupTypeColor","initialHorizontalOffset","random","initialVerticalOffset","from","position","x","y","scale","color","set","endHorizontalOffset","to","a","addAnim","release","WHITE"],"mappings":"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","sourcesContent":["// DamageControl.ts\nimport { _decorator, Component, Node, Label, Vec3, find, UITransform, tween, UIOpacity, Color, Canvas, Camera, director, view } from 'cc';\nimport { LabelAnimData } from '../pop/popuplabel/label-anim-data';\nimport { ObjectPool } from '../pop/popuplabel/object-pool';\nimport { PopUpLabel } from '../pop/popuplabel/popup-label';\nimport { AttackType as DamageSystemAttackType } from '../common/Enums'; // 重命名避免与 DamageControl 内部的 DamageType 冲突\n\nconst { ccclass, property } = _decorator;\n\n// DamageControl 内部用于区分显示类型的枚举\nexport enum PopupType {\n    PhysicalDamage,\n    MagicDamage, // 示例，根据 AttackType 映射\n    TrueDamage,\n    Heal,\n    CritPhysicalDamage, // 区分暴击显示\n    CritMagicDamage,\n    // ... 可以添加更多类型\n}\n\n@ccclass('DamageControl')\nexport class DamageControl extends Component {\n    private static _instance: DamageControl;\n\n    @property(PopUpLabel)\n    private damagePopup: PopUpLabel = null;\n\n    // 移除伤害计算相关属性\n    // private damageFloatRange: number = 0.1;\n\n    private baseFontScale: number = 1.0;\n    private critFontScale: number = 1.2;\n    private popupDuration: number = 1.2;\n    private popupMoveEase: string = \"sineOut\";\n    private popupEndScaleFactor: number = 0.5;\n    private popupDriftHeight: number = 120;\n\n    public static getInstance(): DamageControl {\n        if (!DamageControl._instance) {\n            DamageControl._instance = find('Canvas/DamageControl')?.getComponent(DamageControl);\n            if (!DamageControl._instance) {\n                console.error(\"DamageControl: 未找到 Canvas 上的 DamageControl 组件！\");\n            }\n        }\n        return DamageControl._instance;\n    }\n\n    onDestroy() {\n        if (DamageControl._instance === this) {\n            DamageControl._instance = null;\n        }\n        // 移除事件监听\n        director.off('final-damage-applied', this.handleDamageEvent, this);\n        director.off('final-heal-applied', this.handleHealEvent, this);\n    }\n\n    start() {\n        if (!this.damagePopup) {\n            this.damagePopup = find('Canvas/DamagePopup')?.getComponent(PopUpLabel);\n        }\n        // 注册全局事件监听\n        director.on('final-damage-applied', this.handleDamageEvent, this);\n        director.on('final-heal-applied', this.handleHealEvent, this);\n        console.log(\"DamageControl started and listening for events.\");\n    }\n\n    // 添加设置PopUpLabel的方法\n    public setPopUpLabel(popupLabel: PopUpLabel) {\n        this.damagePopup = popupLabel;\n    }\n\n    // 处理最终伤害事件\n    private handleDamageEvent(eventData: { targetNode: Node, sourceNode?: Node, damage: number, damageType: DamageSystemAttackType, isCrit: boolean }) {\n        if (!eventData || !eventData.targetNode || eventData.damage <= 0) return;\n\n        // 确定显示类型\n        let popupType: PopupType;\n        if (eventData.isCrit) {\n            popupType = eventData.damageType === DamageSystemAttackType.PHYSICAL ? PopupType.CritPhysicalDamage : PopupType.CritMagicDamage; // 简化处理\n        } else {\n            popupType = eventData.damageType === DamageSystemAttackType.PHYSICAL ? PopupType.PhysicalDamage : PopupType.MagicDamage;\n        }\n        if (eventData.damageType === DamageSystemAttackType.TRUE) {\n            popupType = PopupType.TrueDamage;\n        }\n\n        const damageStr = Math.round(eventData.damage).toString();\n        this.showNumberPopup(eventData.targetNode, damageStr, eventData.isCrit, popupType);\n    }\n\n    // 处理最终治疗事件\n    private handleHealEvent(eventData: { targetNode: Node, sourceNode?: Node, healAmount: number }) {\n        if (!eventData || !eventData.targetNode || eventData.healAmount <= 0) return;\n\n        const healStr = Math.round(eventData.healAmount).toString();\n        // 治疗默认不暴击，类型为 Heal\n        this.showNumberPopup(eventData.targetNode, `+${healStr}`, false, PopupType.Heal);\n    }\n\n    /**\n     * 通用的数字飘字显示方法\n     * @param targetNode 目标节点\n     * @param numberStr 要显示的数字字符串 (已包含 +/- 或暴击前缀)\n     * @param isCrit 是否暴击 (影响动画和字体大小)\n     * @param popupType 显示类型 (影响颜色等)\n     */\n    public showNumberPopup(targetNode: Node, numberStr: string, isCrit: boolean, popupType: PopupType) {\n        \n        if (!this.damagePopup) {\n            this.damagePopup = find('Canvas/DamagePopup')?.getComponent(PopUpLabel);\n            if (!this.damagePopup) {\n                console.error(\"DamageControl: 未找到PopUpLabel组件，无法显示伤害数字\");\n                return;\n            }\n        }\n        if (!targetNode || !targetNode.isValid) return;\n        const uiTransTarget = targetNode.getComponent(UITransform);\n        if (!uiTransTarget) return;\n\n        const headOffset = uiTransTarget.height / 2;\n        const worldPos = uiTransTarget.convertToWorldSpaceAR(new Vec3(0, 0, 0));\n        const uiTransPopup = this.damagePopup.node.getComponent(UITransform);\n        if (!uiTransPopup) return;\n        const localPos = uiTransPopup.convertToNodeSpaceAR(worldPos);\n\n        const anim = ObjectPool.allocate(LabelAnimData);\n        anim.text = numberStr;\n        anim.duration = this.popupDuration;\n        anim.ease = \"backOut\";\n        const displayColor = this.getPopupTypeColor(popupType);\n\n        const initialHorizontalOffset = (Math.random() * 2 - 1) * 60;\n        const initialVerticalOffset = (Math.random() * 2 - 1) * 10;\n        anim.from.position.x = localPos.x + initialHorizontalOffset;\n        anim.from.position.y = localPos.y + headOffset + initialVerticalOffset;\n        anim.from.scale = isCrit ? this.critFontScale : this.baseFontScale;\n        anim.from.color.set(displayColor);\n\n        const endHorizontalOffset = initialHorizontalOffset + (Math.random() * 2 - 1) * 30;\n        anim.to.position.x = localPos.x + endHorizontalOffset;\n        anim.to.position.y = localPos.y + headOffset + this.popupDriftHeight + initialVerticalOffset;\n        anim.to.scale = (isCrit ? this.critFontScale : this.baseFontScale) * this.popupEndScaleFactor;\n        anim.to.color.set(displayColor);\n        anim.to.color.a = 0;\n\n        this.damagePopup.addAnim(anim);\n        anim.release();\n    }\n\n    // 根据显示类型获取颜色\n    private getPopupTypeColor(popupType: PopupType): Color {\n        switch (popupType) {\n            case PopupType.PhysicalDamage:\n                return new Color(255, 255, 255, 255); // 白\n            case PopupType.CritPhysicalDamage:\n                return new Color(255, 100, 0, 255); // 橙红 (暴击物理)\n            case PopupType.MagicDamage:\n                return new Color(138, 43, 226, 255); // 紫 (魔法)\n            case PopupType.CritMagicDamage:\n                return new Color(255, 0, 255, 255); // 品红 (暴击魔法)\n            case PopupType.TrueDamage:\n                return new Color(218, 165, 32, 255); // 金黄 (真实)\n            case PopupType.Heal:\n                return new Color(0, 255, 0, 255);   // 绿 (治疗)\n            default:\n                return Color.WHITE;\n        }\n    }\n}\n\n"]}