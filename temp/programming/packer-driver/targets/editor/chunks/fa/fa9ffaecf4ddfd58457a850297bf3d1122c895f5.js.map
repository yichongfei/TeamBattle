{"version":3,"sources":["file:///D:/cocos%20creator%20project/TeamBattle/assets/resources/scripts/pop/popuplabel/popup-label.ts"],"names":["_decorator","BitmapFont","CCBoolean","CCFloat","CCInteger","Color","Sprite","SpriteAtlas","SpriteFrame","LabelAnimData","LabelAnimRuntimeInfo","ObjectPool","popUpLabelAssembler","ccclass","property","PopUpLabel","type","tooltip","override","visible","_anims","defaultSpriteFrame","_fonts","spriteFrame","defaultFont","fonts","v","spr","map","f","undefined","markForUpdateRenderData","spacingX","_spacingX","spriteAtlas","_atlas","_type","trim","_isTrimmedMode","sizeMode","_sizeMode","grayscale","_useGrayscale","color","_color","addAnim","data","length","maxAnimations","allocate","release","anim","font","push","anims","onEnable","update","dt","flag","forEach","a","shouldRecycle","filter","_flushAssembler","_assembler","destroyRenderData","_renderData","createData","material","getRenderMaterial","_updateColor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,O,OAAAA,O;AAASC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,W,OAAAA,W;;AACnFC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,oB,iBAAAA,oB;;AACAC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,mB,iBAAAA,mB;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBd,U;;4BAGjBe,U,WADZF,OAAO,CAAC,YAAD,C,UAGHC,QAAQ,CAACN,WAAD,C,UAKRM,QAAQ,CAACb,UAAD,C,UAKRa,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAE,CAACf,UAAD;AADA,OAAD,C,UAIRa,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAE,CAACf,UAAD,CADA;AAENgB,QAAAA,OAAO,EAAE;AAFH,OAAD,C,UAcRH,QAAQ,CAACX,OAAD,C,UAERW,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAEb,OADA;AAENc,QAAAA,OAAO,EAAE;AAFH,OAAD,C,UAeRH,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAET,WADA;AAENW,QAAAA,QAAQ,EAAE,IAFJ;AAGNC,QAAAA,OAAO,EAAE;AAHH,OAAD,C,UASRL,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAEZ,SADA;AAENc,QAAAA,QAAQ,EAAE,IAFJ;AAGNC,QAAAA,OAAO,EAAE;AAHH,OAAD,C,WASRL,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAEd,SADA;AAENgB,QAAAA,QAAQ,EAAE,IAFJ;AAGNC,QAAAA,OAAO,EAAE;AAHH,OAAD,C,WASRL,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAEZ,SADA;AAENc,QAAAA,QAAQ,EAAE,IAFJ;AAGNC,QAAAA,OAAO,EAAE;AAHH,OAAD,C,WASRL,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAEd,SADA;AAENgB,QAAAA,QAAQ,EAAE,IAFJ;AAGNC,QAAAA,OAAO,EAAE;AAHH,OAAD,C,WASRL,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAEX,KADA;AAENa,QAAAA,QAAQ,EAAE,IAFJ;AAGNC,QAAAA,OAAO,EAAE;AAHH,OAAD,C,WAURL,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAEZ,SADA;AAENa,QAAAA,OAAO,EAAE;AAFH,OAAD,C,2BAvGb,MACaF,UADb,SACgCT,MADhC,CACuC;AAAA;AAAA;;AAAA;;AAAA;;AAqGnC;AArGmC;;AAAA,eAqI3Bc,MArI2B,GAqIM,EArIN;AAAA;;AACnC;AAEsB,YAAlBC,kBAAkB,GAAuB;AAAA;;AACzC,iCAAO,KAAKC,MAAZ,6BAAO,aAAc,CAAd,CAAP,qBAAO,aAAkBC,WAAzB;AACH;;AAGc,YAAXC,WAAW,GAAsB;AAAA;;AACjC,kCAAO,KAAKF,MAAZ,qBAAO,cAAc,CAAd,CAAP;AACH;;AAUe,YAALG,KAAK,GAAsB;AAClC,iBAAO,KAAKH,MAAZ;AACH;;AACe,YAALG,KAAK,CAACC,CAAD,EAAuB;AAAA;;AACnC,gBAAMC,GAAG,UAAGD,CAAC,CAAC,CAAD,CAAJ,qBAAG,IAAMH,WAAlB;AACA,eAAKD,MAAL,GAAcI,CAAC,CAACE,GAAF,CAAMC,CAAC,IAAK,CAAAA,CAAC,QAAD,YAAAA,CAAC,CAAEN,WAAH,MAAmBI,GAApB,GAA2BE,CAA3B,GAA+BC,SAA1C,CAAd;AACA,eAAKP,WAAL,oBAAmB,KAAKD,MAAL,CAAY,CAAZ,CAAnB,qBAAmB,cAAgBC,WAAnC;AACA,eAAKQ,uBAAL;AACH;;AAQkB,YAARC,QAAQ,GAAW;AAC1B,iBAAO,KAAKC,SAAZ;AACH;;AACkB,YAARD,QAAQ,CAACN,CAAD,EAAY;AAC3B,cAAI,KAAKO,SAAL,KAAmBP,CAAvB,EAA0B;AACtB;AACH;;AACD,eAAKO,SAAL,GAAiBP,CAAjB;AACA,eAAKK,uBAAL;AACH;;AAOc,YAAXG,WAAW,GAAgB;AAC3B,iBAAO,KAAKC,MAAZ;AACH;;AAOO,YAAJnB,IAAI,GAAsB;AAC1B,iBAAO,KAAKoB,KAAZ;AACH;;AAOO,YAAJC,IAAI,GAAY;AAChB,iBAAO,KAAKC,cAAZ;AACH;;AAOW,YAARC,QAAQ,GAA0B;AAClC,iBAAO,KAAKC,SAAZ;AACH;;AAOY,YAATC,SAAS,GAAY;AACrB,iBAAO,KAAKC,aAAZ;AACH;;AAOQ,YAALC,KAAK,GAAU;AACf,iBAAO,KAAKC,MAAZ;AACH;;AAOmC;;AAEpC;AACJ;AACA;AACA;AACA;AACA;AACWC,QAAAA,OAAO,CAACC,IAAD,EAAsB;AAChC;AACA,cAAI,KAAK1B,MAAL,CAAY2B,MAAZ,IAAsB,KAAKC,aAA/B,EAA8C;AAC1C;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA,0CAAWC,QAAX;AAAA;AAAA,gDAAmCC,OAAnC,GAN0C,CAMI;AAC9C;AACA;;AACA;AACH,WAZ+B,CAahC;;;AAEA,gBAAMC,IAAI,GAAG;AAAA;AAAA,wCAAWF,QAAX;AAAA;AAAA,4DAA0CH,IAA1C,EAAgD,KAAKxB,MAAL,CAAYwB,IAAI,CAACM,IAAjB,CAAhD,EAAwE,KAAKpB,QAA7E,CAAb;;AACA,eAAKZ,MAAL,CAAYiC,IAAZ,CAAiBF,IAAjB;AACH;;AAGe,YAALG,KAAK,GAA2B;AACvC,iBAAO,KAAKlC,MAAZ;AACH;;AAEDmC,QAAAA,QAAQ,GAAG;AACP,gBAAMA,QAAN;AACA,eAAKxB,uBAAL;AACH;;AAEDyB,QAAAA,MAAM,CAACC,EAAD,EAAa;AACf,cAAIC,IAAI,GAAG,KAAX;;AACA,eAAKtC,MAAL,CAAYuC,OAAZ,CAAoBC,CAAC,IAAI;AACrB,gBAAIA,CAAC,CAACC,aAAN,EAAqB;AACjBH,cAAAA,IAAI,GAAG,IAAP;AACAE,cAAAA,CAAC,CAACV,OAAF;AACH;AACJ,WALD;;AAMA,eAAK9B,MAAL,GAAc,KAAKA,MAAL,CAAY0C,MAAZ,CAAmBF,CAAC,IAAI,CAACA,CAAC,CAACC,aAA3B,CAAd;;AACA,eAAKzC,MAAL,CAAYuC,OAAZ,CAAoBC,CAAC,IAAIA,CAAC,CAACJ,MAAF,CAASC,EAAT,CAAzB;;AACA,cAAI,KAAKrC,MAAL,CAAY2B,MAAZ,IAAsBW,IAA1B,EAAgC;AAC5B,iBAAK3B,uBAAL;AACH;AACJ;;AAESgC,QAAAA,eAAe,GAAG;AACxB,cAAI,KAAKC,UAAL;AAAA;AAAA,yDAAJ,EAA6C;AACzC,iBAAKC,iBAAL;AACA,iBAAKD,UAAL;AAAA;AAAA;AACH;;AACD,cAAI,CAAC,KAAKE,WAAV,EAAuB;AACnB,gBAAI,KAAKF,UAAL,IAAmB,KAAKA,UAAL,CAAgBG,UAAvC,EAAmD;AAC/C,mBAAKD,WAAL,GAAmB,KAAKF,UAAL,CAAgBG,UAAhB,CAA2B,IAA3B,CAAnB;AACA,mBAAKD,WAAL,CAAiBE,QAAjB,GAA4B,KAAKC,iBAAL,CAAuB,CAAvB,CAA5B;AACA,mBAAKtC,uBAAL;;AACA,mBAAKuC,YAAL;AACH;AACJ;AACJ;;AA3KkC,O;;;;;iBAeC,E;;;;;;;iBAgBR,C;;;;;;;iBA2EG,G","sourcesContent":["import { _decorator, BitmapFont, CCBoolean, CCFloat, CCInteger, Color, Sprite, SpriteAtlas, SpriteFrame } from 'cc';\nimport { LabelAnimData } from './label-anim-data';\nimport { LabelAnimRuntimeInfo } from './label-anim-runtime-data';\nimport { ObjectPool } from './object-pool';\nimport { popUpLabelAssembler } from './popup-label-assembler';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PopUpLabel')\nexport class PopUpLabel extends Sprite {\n    //useMult = false;\n    @property(SpriteFrame)\n    get defaultSpriteFrame(): SpriteFrame | null {\n        return this._fonts?.[0]?.spriteFrame;\n    }\n\n    @property(BitmapFont)\n    get defaultFont(): BitmapFont | null {\n        return this._fonts?.[0];\n    }\n\n    @property({\n        type: [BitmapFont],\n    })\n    private _fonts: Array<BitmapFont> = [];\n    @property({\n        type: [BitmapFont],\n        tooltip: \"所有位图字体需要使用同一张位图资源\"\n    })\n    public get fonts(): Array<BitmapFont> {\n        return this._fonts;\n    }\n    public set fonts(v: Array<BitmapFont>) {\n        const spr = v[0]?.spriteFrame;\n        this._fonts = v.map(f => (f?.spriteFrame === spr) ? f : undefined);\n        this.spriteFrame = this._fonts[0]?.spriteFrame;\n        this.markForUpdateRenderData();\n    }\n\n    @property(CCFloat)\n    private _spacingX: number = 0;\n    @property({\n        type: CCFloat,\n        tooltip: \"字间距\"\n    })\n    public get spacingX(): number {\n        return this._spacingX;\n    }\n    public set spacingX(v: number) {\n        if (this._spacingX === v) {\n            return;\n        }\n        this._spacingX = v;\n        this.markForUpdateRenderData();\n    }\n\n    @property({\n        type: SpriteAtlas,\n        override: true,\n        visible: false\n    })\n    get spriteAtlas(): SpriteAtlas {\n        return this._atlas;\n    }\n\n    @property({\n        type: CCInteger,\n        override: true,\n        visible: false\n    })\n    get type(): typeof this._type {\n        return this._type;\n    }\n\n    @property({\n        type: CCBoolean,\n        override: true,\n        visible: false\n    })\n    get trim(): boolean {\n        return this._isTrimmedMode;\n    }\n\n    @property({\n        type: CCInteger,\n        override: true,\n        visible: false\n    })\n    get sizeMode(): typeof this._sizeMode {\n        return this._sizeMode;\n    }\n\n    @property({\n        type: CCBoolean,\n        override: true,\n        visible: false\n    })\n    get grayscale(): boolean {\n        return this._useGrayscale;\n    }\n\n    @property({\n        type: Color,\n        override: true,\n        visible: false\n    })\n    get color(): Color {\n        return this._color;\n    }\n\n    // 添加一个可配置的最大动画数量\n    @property({\n        type: CCInteger,\n        tooltip: \"允许同时存在的最大动画数量\"\n    })\n    public maxAnimations: number = 100; // 设置一个上限，例如 100\n\n    /** \n     * 添加一个动画\n     * @description 使用 ObjectPool.allocate 创建新的动画\n     * @description 三角形过多可能超过MeshBuffer顶点数量上限，详见下面的链接\n     * @see https://docs.cocos.com/creator/manual/zh/ui-system/components/engine/ui-batch.html#v341-%E4%B9%8B%E5%90%8E\n     */\n    public addAnim(data: LabelAnimData) {\n        // *** 新增：检查当前动画数量是否已达上限 ***\n        if (this._anims.length >= this.maxAnimations) {\n            // 如果达到上限，可以选择直接返回，或者快速回收最早的动画来腾出空间\n            // 这里先简单返回，不显示新的伤害数字\n            // console.warn(`PopUpLabel: 达到最大动画数量 (${this.maxAnimations})，忽略新的伤害数字。`);\n            // 注意：这里需要确保传入的 data (LabelAnimData) 也要被回收\n            // 假设 LabelAnimData 也有 release 方法 (根据你的 object-pool 实现)\n            ObjectPool.allocate(LabelAnimData).release(); // 从池中取一个再立刻释放，确保计数平衡\n            // 或者如果 LabelAnimData 不需要池管理，直接 return 即可\n            // data.release?.(); // 如果你的 LabelAnimData 需要 release\n            return; \n        }\n        // *** 结束新增检查 ***\n\n        const anim = ObjectPool.allocate(LabelAnimRuntimeInfo, data, this._fonts[data.font], this.spacingX);\n        this._anims.push(anim);\n    }\n\n    private _anims: LabelAnimRuntimeInfo[] = [];\n    public get anims(): LabelAnimRuntimeInfo[] {\n        return this._anims;\n    }\n\n    onEnable() {\n        super.onEnable();\n        this.markForUpdateRenderData();\n    }\n\n    update(dt: number) {\n        let flag = false;\n        this._anims.forEach(a => {\n            if (a.shouldRecycle) {\n                flag = true;\n                a.release();\n            }\n        });\n        this._anims = this._anims.filter(a => !a.shouldRecycle);\n        this._anims.forEach(a => a.update(dt));\n        if (this._anims.length || flag) {\n            this.markForUpdateRenderData();\n        }\n    }\n\n    protected _flushAssembler() {\n        if (this._assembler !== popUpLabelAssembler) {\n            this.destroyRenderData();\n            this._assembler = popUpLabelAssembler;\n        }\n        if (!this._renderData) {\n            if (this._assembler && this._assembler.createData) {\n                this._renderData = this._assembler.createData(this);\n                this._renderData.material = this.getRenderMaterial(0);\n                this.markForUpdateRenderData();\n                this._updateColor();\n            }\n        }\n    }\n}\n"]}