{"version":3,"sources":["file:///D:/cocos%20creator%20project/TeamBattle/assets/resources/scripts/CharacterControl.ts"],"names":["_decorator","Component","sp","Vec3","CCFloat","log","ccclass","property","CharacterState","CharacterControl","type","tooltip","Skeleton","_currentState","IDLE","velocity","steeringTarget","steeringForce","squadMates","currentState","start","setSquadMates","mates","filter","m","update","deltaTime","enabled","set","calculateSteeringForces","applySteeringToVelocity","updatePosition","updateAnimationAndOrientation","targetForce","arrive","lengthSqr","clone","multiplyScalar","normalize","maxForce","applyForce","separationForce","separate","separationWeight","add","maxSpeed","moveDelta","newWorld","node","worldPosition","setWorldPosition","speedSqr","desiredAnim","currentAnim","spineAnimation","animation","playAnimation","directionX","x","Math","abs","scale","target","desired","subtract","distance","length","name","ZERO","desiredSpeed","effectiveSlowingRadius","slowingRadius","max","steer","neighbors","desiredSeparation","neighborRadius","count","other","isValid","position","diff","force","setSteeringTarget","changeState","newState","PATROL","CHASE","ATTACK","DIE","animName","loop","currentTrackEntry","getCurrent","setAnimation"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, sp, Vec3, CCFloat, Vec2, warn, log } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * 角色状态枚举\n */\nexport enum CharacterState {\n    IDLE,    // 待机\n    PATROL,  // 巡逻\n    CHASE,   // 追击\n    ATTACK,  // 攻击\n    HIT,     // 受击\n    STUN,    // 眩晕\n    DIE,     // 死亡\n    VICTORY  // 胜利\n}\n\n/**\n * 角色控制基类，使用操控行为处理移动、动画、状态管理等通用逻辑。\n */\n@ccclass('CharacterControl')\nexport class CharacterControl extends Component {\n\n    // --- 基本属性 ---\n    @property({\n        type: CCFloat,\n        tooltip: '角色的最大移动速度'\n    })\n    maxSpeed: number = 150;\n\n    @property({\n        type: CCFloat,\n        tooltip: '施加转向力的最大限制'\n    })\n    maxForce: number = 500;\n\n    @property({\n        type: sp.Skeleton,\n        tooltip: '关联的 Spine 动画组件'\n    })\n    spineAnimation: sp.Skeleton = null;\n\n    // --- 操控行为属性 ---\n    @property({\n        type: CCFloat,\n        tooltip: '检测邻居的半径'\n    })\n    neighborRadius: number = 80;\n\n    @property({\n        type: CCFloat,\n        tooltip: '分离力的权重'\n    })\n    separationWeight: number = 1.5;\n\n    @property({\n        type: CCFloat,\n        tooltip: '到达目标时开始减速的半径'\n    })\n    slowingRadius: number = 100;\n\n    // --- 内部状态 ---\n    /** @internal */ protected _currentState: CharacterState = CharacterState.IDLE;\n    /** @internal */ protected velocity: Vec3 = new Vec3();\n    /** @internal */ protected steeringTarget: Vec3 = null;\n    /** @internal */ protected steeringForce: Vec3 = new Vec3();\n    /** @internal */ protected squadMates: CharacterControl[] = [];\n\n    // --- Getter/Setter ---\n    public get currentState(): CharacterState {\n        return this._currentState;\n    }\n\n    // --- 初始化 ---\n    start() {\n        // 初始化是被动的，等待 SquadManager\n    }\n\n    /**\n     * 由 SquadManager 调用，提供其他小队成员的列表。\n     * @param mates 其他成员的 CharacterControl 列表\n     */\n    public setSquadMates(mates: CharacterControl[]) {\n        this.squadMates = mates.filter(m => m !== this);\n    }\n\n    // --- 更新逻辑 ---\n    update(deltaTime: number) {\n        if (deltaTime === 0 || !this.enabled) return;\n\n        // 重置本帧的操控力\n        this.steeringForce.set(0, 0, 0);\n\n        // 根据当前状态和目标计算操控力\n        this.calculateSteeringForces();\n\n        // 应用操控力到速度\n        this.applySteeringToVelocity(deltaTime);\n\n        // 根据速度更新位置\n        this.updatePosition(deltaTime);\n\n        // 更新动画和朝向\n        this.updateAnimationAndOrientation();\n    }\n\n    /** @internal */\n    calculateSteeringForces() {\n        let targetForce = new Vec3();\n        if (this.steeringTarget) {\n            // 如果有目标，使用 Arrive 行为\n            targetForce = this.arrive(this.steeringTarget);\n        } else {\n            // 如果没有目标，应用刹车力（与当前速度相反）\n            if (this.velocity.lengthSqr() > 0.1) {\n                targetForce = this.velocity.clone().multiplyScalar(-1).normalize().multiplyScalar(this.maxForce * 0.5);\n            } else {\n                // 如果几乎停止，确保速度变为零\n                this.velocity.set(0, 0, 0);\n            }\n        }\n        this.applyForce(targetForce);\n\n        // 计算与附近队友的分离力\n        const separationForce = this.separate(this.squadMates);\n        this.applyForce(separationForce.multiplyScalar(this.separationWeight));\n    }\n\n    /** @internal */\n    applySteeringToVelocity(deltaTime: number) {\n        // 限制操控力\n        if (this.steeringForce.lengthSqr() > this.maxForce * this.maxForce) {\n            this.steeringForce.normalize().multiplyScalar(this.maxForce);\n        }\n\n        // 将力应用到速度: velocity += steeringForce * deltaTime\n        this.velocity.add(this.steeringForce.clone().multiplyScalar(deltaTime));\n\n        // 限制速度到最大速度\n        if (this.velocity.lengthSqr() > this.maxSpeed * this.maxSpeed) {\n            this.velocity.normalize().multiplyScalar(this.maxSpeed);\n        }\n    }\n\n    /** @internal */\n    updatePosition(deltaTime: number) {\n        // 1) 先算本帧移动的世界量\n        const moveDelta = this.velocity.clone().multiplyScalar(deltaTime);\n        // 2) 在世界坐标系下更新位置\n        const newWorld = this.node.worldPosition.clone().add(moveDelta);\n        this.node.setWorldPosition(newWorld);\n    }\n\n    /** @internal */\n    updateAnimationAndOrientation() {\n        // 根据速度确定动画\n        const speedSqr = this.velocity.lengthSqr();\n        let desiredAnim = 'idle';\n        if (speedSqr > 1.0) {\n            desiredAnim = 'run';\n        }\n\n        // 只在需要时更改动画\n        const currentAnim = this.spineAnimation?.animation;\n        if (currentAnim !== desiredAnim) {\n            this.playAnimation(desiredAnim, true);\n        }\n\n        // 根据速度方向更新朝向\n        if (speedSqr > 0.1) {\n            const directionX = this.velocity.x;\n            if (Math.abs(directionX) > 0.01) {\n                // 假设原始资产面向左侧\n                this.node.scale = new Vec3(directionX < 0 ? 1 : -1, 1, 1);\n            }\n        }\n    }\n\n    // --- 操控行为 ---\n\n    /**\n     * 计算平滑到达目标位置的操控力 (Arrive 行为)。\n     * @param target 目标位置\n     * @returns 计算出的到达力向量\n     */\n    arrive(target: Vec3): Vec3 {\n        const desired = target.clone().subtract(this.node.worldPosition);\n        const distance = desired.length();\n\n        // 非常接近时直接设置位置并停止\n        if (distance < 5) {\n            log(`角色 ${this.node.name}: 到达目标点!`);\n            this.velocity.set(0, 0, 0);\n            this.steeringTarget = null;\n            return Vec3.ZERO;\n        }\n\n        let desiredSpeed = this.maxSpeed;\n        const effectiveSlowingRadius = this.slowingRadius;\n\n        // 在减速半径内调整期望速度\n        if (distance < effectiveSlowingRadius) {\n            desiredSpeed = this.maxSpeed * (distance / Math.max(effectiveSlowingRadius, 0.1));\n            desiredSpeed = Math.max(desiredSpeed, 5);\n        }\n\n        // 计算期望速度向量\n        if (distance > 0.1) {\n            desired.normalize().multiplyScalar(desiredSpeed);\n        } else {\n            desired.set(0, 0, 0);\n            if (this.velocity.lengthSqr() < 1.0) {\n                this.velocity.set(0, 0, 0);\n            }\n        }\n\n        // 转向力 = 期望速度 - 当前速度\n        const steer = desired.subtract(this.velocity);\n\n        // 如果非常接近目标，增加转向力的强度以确保能到达\n        if (distance < 20) {\n            steer.multiplyScalar(3.0);\n        }\n\n        return steer;\n    }\n\n    /**\n     * 计算与附近邻居分离的操控力。\n     * @param neighbors 潜在邻居列表（其他小队成员）\n     * @returns 计算出的分离力向量\n     */\n    separate(neighbors: CharacterControl[]): Vec3 {\n        const desiredSeparation = this.neighborRadius * 0.8;\n        const steer = new Vec3();\n        let count = 0;\n\n        for (const other of neighbors) {\n            if (!other || !other.isValid || other === this) continue;\n\n            const distance = Vec3.distance(this.node.position, other.node.position);\n\n            // 检查其他角色是否是邻居（在半径内）\n            if (distance > 0 && distance < desiredSeparation) {\n                // 计算指向远离邻居的力向量\n                const diff = this.node.position.clone().subtract(other.node.position);\n                diff.normalize();\n                diff.multiplyScalar(1.0 / distance);\n                steer.add(diff);\n                count++;\n            }\n        }\n\n        // 如果有邻居，对转向向量取平均值\n        if (count > 0) {\n            steer.multiplyScalar(1.0 / count);\n        }\n\n        // 如果分离力显著，将其缩放到最大速度\n        if (steer.lengthSqr() > 0) {\n            steer.normalize().multiplyScalar(this.maxSpeed);\n            // 转向力 = 期望分离速度 - 当前速度\n            steer.subtract(this.velocity);\n        }\n\n        return steer;\n    }\n\n    /**\n     * 对角色施加一个操控力。\n     * @param force 要施加的力向量\n     */\n    applyForce(force: Vec3) {\n        this.steeringForce.add(force);\n    }\n\n    // --- 供 SquadManager 使用的公共方法 ---\n\n    /**\n     * 设置角色的操控目标。\n     * @param target 世界坐标目标，或 null 表示停止/刹车\n     */\n    public setSteeringTarget(target: Vec3 | null) {\n        this.steeringTarget = target ? target.clone() : null;\n    }\n\n    /**\n     * 切换角色状态。\n     * @param newState 要切换到的新状态\n     */\n    changeState(newState: CharacterState) {\n        if (this._currentState === newState) return;\n        log(`角色 ${this.node.name} 状态改变: ${CharacterState[this._currentState]} -> ${CharacterState[newState]}`);\n        this._currentState = newState;\n\n        switch (newState) {\n            case CharacterState.IDLE:\n                this.velocity.set(0, 0, 0);\n                this.playAnimation('idle', true);\n                break;\n            case CharacterState.PATROL:\n                break;\n            case CharacterState.CHASE:\n                break;\n            case CharacterState.ATTACK:\n                this.velocity.set(0, 0, 0);\n                this.playAnimation('attack', false);\n                break;\n            case CharacterState.DIE:\n                this.velocity.set(0, 0, 0);\n                this.playAnimation('die', false);\n                this.enabled = false;\n                break;\n        }\n    }\n\n    /**\n     * 播放指定的 Spine 动画。\n     * @param animName 动画名称 (需要与 Spine 文件中的名称一致)\n     * @param loop 是否循环播放\n     */\n    playAnimation(animName: string, loop: boolean = true) {\n        if (!this.spineAnimation) {\n            return;\n        }\n        const currentTrackEntry = this.spineAnimation.getCurrent(0);\n        if (!currentTrackEntry || currentTrackEntry.animation.name !== animName || loop) {\n            if (currentTrackEntry && currentTrackEntry.animation.name === animName && !loop) {\n            } else {\n                this.spineAnimation.setAnimation(0, animName, loop);\n            }\n        }\n    }\n} "]}