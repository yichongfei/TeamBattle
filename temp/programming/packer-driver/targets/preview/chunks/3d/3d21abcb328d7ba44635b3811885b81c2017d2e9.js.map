{"version":3,"sources":["file:///D:/cocos%20creator%20project/TeamBattle/assets/resources/scripts/pop/popuplabel/object-pool.ts"],"names":["ObjectPool","_getItemArray","ctor","itemArray","_itemArrayMap","has","get","set","init","_initMap","forEach","count","clazz","index","push","clear","allocate","item","length","pop","args","initialize","i","release","register","maxSize","initSize","WeakMap","Map"],"mappings":"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","sourcesContent":["export class ObjectPool {\n    private static _itemArrayMap: WeakMap<PoolItemCtor, PoolItem[]> = new WeakMap();\n\n    private static _initMap: Map<PoolItemCtor, number> = new Map();\n\n    private static _getItemArray(ctor: PoolItemCtor) {\n        let itemArray: PoolItem[];\n        if (ObjectPool._itemArrayMap.has(ctor)) {\n            itemArray = ObjectPool._itemArrayMap.get(ctor);\n        } else {\n            itemArray = [];\n            ObjectPool._itemArrayMap.set(ctor, itemArray);\n        }\n        return itemArray;\n    }\n\n    public static init() {\n        ObjectPool._initMap.forEach((count, clazz) => {\n            const itemArray = ObjectPool._getItemArray(clazz);\n            for (let index = 0; index < count; index++) {\n                itemArray.push(new clazz());\n            }\n        });\n        ObjectPool._initMap.clear();\n    }\n\n    public static allocate<T extends PoolItem>(\n        ctor: Ctor<T>,\n        ...args: Parameters<T[\"initialize\"]>\n    ): T {\n        const itemArray = ObjectPool._getItemArray(ctor);\n        let item: T;\n        if (itemArray.length) {\n            item = <T>itemArray.pop();\n        } else {\n            item = <T>new ctor();\n        }\n        item.initialize?.(...args);\n        return item;\n    }\n\n    public static clear(ctor: PoolItemCtor) {\n        ObjectPool._initMap.clear();\n        ObjectPool._getItemArray(ctor).forEach(i => i.release?.());\n        ObjectPool._getItemArray(ctor).length = 0;\n    }\n\n    public static register(maxSize = 128, initSize = 0) {\n        return function <T extends PoolItemCtor>(ctor: T) {\n            const clazz = class extends ctor {\n                public release(...args: any[]) {\n                    super.release?.(...args);\n                    const itemArray = ObjectPool._getItemArray(clazz);\n                    if (itemArray.length < maxSize) {\n                        ObjectPool._getItemArray(clazz).push(this);\n                    }\n                }\n            };\n            if (initSize > 0) {\n                ObjectPool._initMap.set(clazz, initSize);\n            }\n            return clazz;\n        };\n    }\n\n}\n\nexport interface PoolItem {\n    initialize?(...args: any[]): void;\n    release(...args: any[]): void;\n}\n\ntype Ctor<T = any> = new (...args: any[]) => T;\n\ntype PoolItemCtor = Ctor<PoolItem>;"]}