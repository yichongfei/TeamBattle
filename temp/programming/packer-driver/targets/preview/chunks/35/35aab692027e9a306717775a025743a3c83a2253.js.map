{"version":3,"sources":["file:///D:/cocos%20creator%20project/TeamBattle/assets/resources/scripts/PlayerSquadManager.ts"],"names":["_decorator","Component","isValid","find","Vec3","HealthComponent","MovementComponent","ccclass","property","PlayerSquadManager","squadMembers","Map","nextSquadIndex","instance","_instance","node","managerNode","getComponent","console","warn","onLoad","destroy","log","start","getAlivePlayerCharacters","aliveNodes","forEach","index","healthComp","isAlive","push","getAllPlayerCharacters","Array","from","keys","filter","addCharacter","characterNode","has","assignedIndex","set","name","size","once","removeCharacter","broadcastSquadLists","all","move","setSquadMates","map","n","removedIndex","get","delete","getSquadIndex","getTotalSquadSize","getSquadCenterPosition","length","ZERO","totalPos","add","worldPosition","multiplyScalar","onDestroy","off","clear"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, isValid, find } from 'cc';\n// 静态导入 HealthComponent 类型，避免循环依赖和动态导入问题\nimport { HealthComponent } from './characters/components/HealthComponent';\nimport { Vec3 } from 'cc';\nimport { MovementComponent } from './characters/components/MovementComponent';\n\nconst { ccclass, property } = _decorator;\n\n// // 定义一个接口来存储角色信息（备选方案）\n// interface SquadMemberInfo {\n//     node: Node;\n//     squadIndex: number;\n// }\n\n/**\n * 管理所有玩家控制的角色单元。\n * 负责：\n * 1. 存储所有玩家角色节点及其唯一的小队索引。\n * 2. 提供获取存活角色列表和查询角色索引的方法。\n */\n@ccclass('PlayerSquadManager')\nexport class PlayerSquadManager extends Component {\n\n    // 移除编辑器直接指定的数组，改为动态管理\n    // @property({\n    //     type: [Node],\n    //     tooltip: '玩家小队所有成员的根节点列表'\n    // })\n    // playerCharacters: Node[] = [];\n\n    // 使用 Map 存储角色 Node 和对应的 squadIndex\n    private squadMembers: Map<Node, number> = new Map<Node, number>();\n    private nextSquadIndex: number = 0; // 用于分配下一个可用的索引\n\n    private static _instance: PlayerSquadManager | null = null;\n\n    public static get instance(): PlayerSquadManager | null {\n        if (!PlayerSquadManager._instance || !isValid(PlayerSquadManager._instance.node)) {\n            PlayerSquadManager._instance = null;\n            const managerNode = find(\"PlayerSquadManagerNode\");\n            if (managerNode) {\n                 PlayerSquadManager._instance = managerNode.getComponent(PlayerSquadManager);\n                 if (!PlayerSquadManager._instance) {\n                      // 使用 console.warn\n                      console.warn(\"PlayerSquadManager: Node found, but component missing.\");\n                 }\n            } else {\n                 // 使用 console.warn\n                 console.warn(\"PlayerSquadManager: Instance not found in scene.\");\n            }\n        }\n        return PlayerSquadManager._instance;\n    }\n\n    onLoad() {\n        if (PlayerSquadManager._instance && PlayerSquadManager._instance !== this) {\n             // 使用 console.warn\n             console.warn(\"PlayerSquadManager: Multiple instances detected. Destroying this one.\");\n             this.destroy();\n             return;\n        }\n        PlayerSquadManager._instance = this;\n        // 使用 console.log\n        console.log(\"PlayerSquadManager initialized.\");\n    }\n\n    start() {\n        // 清理日志\n    }\n\n    /**\n     * 获取当前所有存活的玩家角色节点列表。\n     * @returns Node[] 存活的玩家角色节点数组\n     */\n    public getAlivePlayerCharacters(): Node[] {\n        const aliveNodes: Node[] = [];\n        this.squadMembers.forEach((index, node) => {\n            if (node && isValid(node)) {\n                 const healthComp = node.getComponent(HealthComponent);\n                 if (healthComp && healthComp.isAlive()) {\n                     aliveNodes.push(node);\n                 }\n            }\n        });\n        // 可以选择按 squadIndex 排序，虽然 CameraFollow 不需要\n        // aliveNodes.sort((a, b) => (this.squadMembers.get(a) ?? 0) - (this.squadMembers.get(b) ?? 0));\n        return aliveNodes;\n    }\n\n    /**\n     * 获取所有已注册的角色节点列表 (无论死活)。\n     * @returns Node[] 所有注册的角色节点数组\n     */\n    public getAllPlayerCharacters(): Node[] {\n        return Array.from(this.squadMembers.keys()).filter(node => node && isValid(node));\n    }\n\n    /**\n     * 添加一个角色到管理器，并分配一个 squadIndex。\n     * @param characterNode 要添加的角色节点\n     * @returns 分配的 squadIndex，如果添加失败则返回 -1\n     */\n    public addCharacter(characterNode: Node): number {\n        if (characterNode && isValid(characterNode) && !this.squadMembers.has(characterNode)) {\n            const assignedIndex = this.nextSquadIndex++;\n            this.squadMembers.set(characterNode, assignedIndex);\n            // 使用 console.log\n            console.log(`PlayerSquadManager: Character [${characterNode.name}] added with squadIndex ${assignedIndex}. Total: ${this.squadMembers.size}`);\n            characterNode.once('destroy', () => {\n                this.removeCharacter(characterNode);\n            });\n            return assignedIndex;\n        }\n        // 使用 console.warn\n        console.warn(`PlayerSquadManager: Failed to add character [${characterNode?.name ?? 'Invalid Node'}]`);\n        return -1;\n    }\n\n    private broadcastSquadLists () {\n        const all = this.getAlivePlayerCharacters();\n        all.forEach(node => {\n            const move = node.getComponent(MovementComponent);\n            if (move) { move.setSquadMates(all.map(n => n.getComponent(MovementComponent))); }\n        });\n    }\n    \n\n     /**\n     * 从管理器移除一个角色。\n     * 通常在角色节点销毁时自动调用。\n     * @param characterNode 要移除的角色节点\n     */\n    public removeCharacter(characterNode: Node) {\n         if (this.squadMembers.has(characterNode)) {\n             const removedIndex = this.squadMembers.get(characterNode);\n             this.squadMembers.delete(characterNode);\n             // 使用 console.log\n             console.log(`PlayerSquadManager: Character [${characterNode.name}] (Index ${removedIndex}) removed. Total: ${this.squadMembers.size}`);\n         } else {\n             // 可能在 DESTROY 事件触发前已经被手动移除\n             // warn(`PlayerSquadManager: Tried to remove character [${characterNode?.name}] which was not found.`);\n         }\n    }\n\n    /**\n     * 获取指定角色节点的 squadIndex。\n     * @param characterNode 要查询的角色节点\n     * @returns 对应的 squadIndex，如果未找到则返回 -1\n     */\n    public getSquadIndex(characterNode: Node): number {\n        // 清理日志\n        return this.squadMembers.get(characterNode) ?? -1;\n    }\n\n    /**\n     * 获取当前小队总人数 (包括死亡的，只要注册过且未销毁)。\n     * @returns number 小队总人数\n     */\n    public getTotalSquadSize(): number {\n        return this.squadMembers.size;\n    }\n\n    /**\n     * 计算并获取当前存活小队的平均中心位置。\n     * @returns Vec3 小队中心世界坐标，如果小队无存活成员则返回 Vec3.ZERO\n     */\n    public getSquadCenterPosition(): Vec3 {\n        const aliveNodes = this.getAlivePlayerCharacters();\n        if (aliveNodes.length === 0) {\n            return Vec3.ZERO; // 或者返回一个其他默认位置？\n        }\n        const totalPos = new Vec3();\n        aliveNodes.forEach(node => totalPos.add(node.worldPosition));\n        return totalPos.multiplyScalar(1 / aliveNodes.length);\n    }\n\n    onDestroy() {\n        if (PlayerSquadManager._instance === this) {\n            PlayerSquadManager._instance = null;\n        }\n        // 清理 Map 和事件监听 (虽然 once 会自动清理，但显式写一下更清晰)\n        this.squadMembers.forEach((index, node) => {\n            if (node && isValid(node)) {\n                 node.off('destroy');\n            }\n        });\n        this.squadMembers.clear();\n    }\n} "]}