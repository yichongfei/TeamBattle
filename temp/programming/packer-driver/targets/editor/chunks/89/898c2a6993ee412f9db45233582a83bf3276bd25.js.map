{"version":3,"sources":["file:///D:/cocos%20creator%20project/TeamBattle/assets/resources/scripts/characters/ai/AIComponent.ts"],"names":["_decorator","Component","Vec3","CCFloat","CharacterStats","HealthComponent","MovementComponent","TargetingComponent","AttackComponent","SkillComponent","RoleComponent","CharacterState","PlayerSquadManager","ccclass","property","AIComponent","type","tooltip","min","_currentState","IDLE","_isActive","_currentTarget","onLoad","stats","getComponent","health","movement","targeting","attack","skills","role","console","warn","node","name","enabled","squadManager","instance","addCharacter","start","on","onCharacterDied","onTargetChanged","log","changeState","update","deltaTime","DEAD","STUNNED","runSimplePlaceholderLogic","target","getCurrentTarget","targetNode","getNode","isSelfAlive","isAlive","isValid","bossPosition","getPosition","distanceToBoss","distance","worldPosition","attackRange","attackRangeBuffer","squadMgr","myIndex","getSquadIndex","squadSize","Math","max","getTotalSquadSize","ringRadius","angle","PI","finalMoveTarget","clone","x","cos","y","sin","distFromCenter","stageCenter","maxDistanceFromCenter","directionFromCenter","subtract","normalize","add","multiplyScalar","ATTACKING","stopMovement","directionToTargetX","currentScaleX","abs","scale","z","startAttacking","MOVING","moveTo","stopAttacking","clearTarget","killer","newTarget","oldTarget","newState","emit","CASTING"],"mappings":"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","sourcesContent":["import { _decorator, Component, Vec3, Node, CCFloat } from 'cc';\nimport { CharacterStats } from '../components/CharacterStats';\nimport { HealthComponent } from '../components/HealthComponent';\nimport { MovementComponent } from '../components/MovementComponent';\nimport { TargetingComponent } from '../components/TargetingComponent';\nimport { AttackComponent } from '../components/AttackComponent';\nimport { SkillComponent } from '../components/SkillComponent';\nimport { RoleComponent } from '../components/RoleComponent';\nimport { CharacterState } from '../../common/Enums';\nimport { ITargetable } from '../../common/Interfaces';\nimport { PlayerSquadManager } from '../../PlayerSquadManager';\n// PlayerSquadManager 暂时不再直接用于此脚本的核心逻辑\n// import { PlayerSquadManager } from '../../PlayerSquadManager'; \n\nconst { ccclass, property } = _decorator;\n\n@ccclass('AIComponent')\nexport class AIComponent extends Component {\n\n    // --- 核心组件引用 ---\n    @property(CharacterStats)\n    private stats: CharacterStats = null;\n    @property(HealthComponent)\n    private health: HealthComponent = null;\n    @property(MovementComponent)\n    private movement: MovementComponent = null;\n    @property(TargetingComponent)\n    private targeting: TargetingComponent = null;\n    @property(AttackComponent)\n    private attack: AttackComponent = null;\n    @property(SkillComponent)\n    private skills: SkillComponent = null;\n    @property(RoleComponent)\n    private role: RoleComponent = null;\n\n    // --- 区域控制参数 ---\n    @property({\n        type: Vec3,\n        tooltip: '战斗舞台的中心点 (世界坐标)'\n    })\n    stageCenter: Vec3 = new Vec3(0, 0, 0);\n\n    @property({\n        type: CCFloat, // 确认 CCFloat 是否导入，如果报错则添加\n        tooltip: '角色允许活动的最大半径 (距离舞台中心)',\n        min: 0\n    })\n    maxDistanceFromCenter: number = 500; // 示例半径\n\n    // --- 内部状态 ---\n    private _currentState: CharacterState = CharacterState.IDLE;\n    private _isActive: boolean = true;\n    private _currentTarget: ITargetable | null = null; // 缓存当前目标，用于检测目标失效\n\n    onLoad() {\n        // 确保所有必要的组件都存在\n        // 使用 getComponent 获取引用，以防编辑器未链接\n        this.stats = this.getComponent(CharacterStats);\n        this.health = this.getComponent(HealthComponent);\n        this.movement = this.getComponent(MovementComponent);\n        this.targeting = this.getComponent(TargetingComponent);\n        this.attack = this.getComponent(AttackComponent);\n        this.skills = this.getComponent(SkillComponent);\n        this.role = this.getComponent(RoleComponent);\n\n        if (!this.stats || !this.health || !this.movement || !this.targeting || !this.attack || !this.skills || !this.role) {\n            console.warn(`AIComponent on [${this.node.name}] is missing one or more required components. Disabling AI.`);\n            this._isActive = false;\n            this.enabled = false;\n            return;\n        }\n\n        // --- PlayerSquadManager 注册不再需要，因为 AI 不再查询索引 ---\n        const squadManager = PlayerSquadManager.instance;\n        if (squadManager) {\n            squadManager.addCharacter(this.node);\n        } else {\n            console.warn(`[${this.node.name}] AIComponent: Could not find PlayerSquadManager instance to register.`);\n        }\n    }\n\n    start() {\n        if (!this._isActive) return;\n        this.health.node.on('character-died', this.onCharacterDied, this);\n        this.targeting.node.on('target-changed', this.onTargetChanged, this);\n        console.log(`AIComponent on [${this.node.name}] initialized and active.`);\n        this.changeState(CharacterState.IDLE);\n    }\n\n    update(deltaTime: number) {\n        if (!this._isActive || this._currentState === CharacterState.DEAD || this._currentState === CharacterState.STUNNED) {\n            return;\n        }\n        this.runSimplePlaceholderLogic(deltaTime);\n    }\n\n    // --- 行为树/状态机逻辑 (注释掉) ---\n    // private initializeBehaviorTree() { ... }\n    // private runStateMachineLogic(deltaTime: number) { ... }\n\n    // --- 简单 AI 逻辑 (回归简化版) ---\n    private runSimplePlaceholderLogic(deltaTime: number) {\n        const target = this.targeting.getCurrentTarget();\n        const targetNode = target?.getNode();\n        const isSelfAlive = this.health?.isAlive() ?? false;\n\n        if (target && isSelfAlive && targetNode && targetNode.isValid) {\n            const bossPosition = target.getPosition();\n            const distanceToBoss = Vec3.distance(this.node.worldPosition, bossPosition);\n            const attackRange = this.stats.attackRange;\n            // 定义一个非常小的缓冲距离，防止在边缘抖动\n            const attackRangeBuffer = 5;\n\n            // --- 移动目标点现在直接是 Boss 位置 (考虑区域限制) ---\n            const squadMgr = PlayerSquadManager.instance;\n            const myIndex = squadMgr ? squadMgr.getSquadIndex(this.node) : 0;\n            const squadSize = Math.max(1, squadMgr ? squadMgr.getTotalSquadSize() : 1);\n\n            // 站位半径：比攻击距离略小，让武器打得到\n            const ringRadius = this.stats.attackRange * 0.8;\n\n            // 均分 360°，每人一个角度槽\n            const angle = (Math.PI * 2 / squadSize) * myIndex;\n\n            // 计算在环上的目标点\n            let finalMoveTarget = bossPosition.clone();\n            finalMoveTarget.x += Math.cos(angle) * ringRadius;\n            finalMoveTarget.y += Math.sin(angle) * ringRadius;\n            const distFromCenter = Vec3.distance(finalMoveTarget, this.stageCenter);\n            if (this.maxDistanceFromCenter > 0 && distFromCenter > this.maxDistanceFromCenter) {\n                const directionFromCenter = finalMoveTarget.clone().subtract(this.stageCenter).normalize();\n                finalMoveTarget = this.stageCenter.clone().add(directionFromCenter.multiplyScalar(this.maxDistanceFromCenter));\n            }\n            // ---\n\n            // --- 根据当前状态和距离决定行为 (简化) --- \n            if (distanceToBoss <= attackRange - attackRangeBuffer) {\n                // 已经明确在攻击范围内，停止移动并攻击\n                if (this._currentState !== CharacterState.ATTACKING) {\n                    this.changeState(CharacterState.ATTACKING);\n                    this.movement.stopMovement(); // 强制停止\n                }\n                // 持续确保面向 Boss\n                const directionToTargetX = bossPosition.x - this.node.worldPosition.x;\n                const currentScaleX = Math.abs(this.node.scale.x);\n                this.node.scale = new Vec3(directionToTargetX < 0 ? currentScaleX : -currentScaleX, this.node.scale.y, this.node.scale.z);\n                // 确保移动停止\n                this.movement.stopMovement();\n                this.attack.startAttacking();\n            } else {\n                // 在攻击范围外，移动向 Boss\n                if (this._currentState !== CharacterState.MOVING) {\n                    this.changeState(CharacterState.MOVING);\n                }\n                this.movement.moveTo(finalMoveTarget); // 直接移动到 Boss 位置 (或边界点)\n                this.attack.stopAttacking();\n            }\n            // ---\n\n        } else {\n            // Target is null OR character is dead OR targetNode is invalid\n            if (!isSelfAlive) { // 如果是自己死了，不做任何操作\n                if (this._currentState !== CharacterState.DEAD) this.changeState(CharacterState.DEAD);\n                return;\n            }\n            // 如果是目标无效或消失\n            // 修正：使用缓存的 _currentTarget 检查目标是否是刚刚失效\n            if (this._currentTarget && target === null) {\n                console.warn(`[${this.node.name}] AI Update: Target became null (likely died or cleared).`);\n            } else if (targetNode && !targetNode.isValid) { // 目标节点本身失效了\n                console.warn(`[${this.node.name}] AI Update: Target node became invalid. Clearing target.`);\n                this.targeting.clearTarget(); // 强制清除目标\n            }\n\n            // 切换到 IDLE 状态\n            if (this._currentState !== CharacterState.IDLE) {\n                console.log(`[${this.node.name}] AI DECISION: No valid target. -> IDLE`);\n                this.changeState(CharacterState.IDLE);\n            }\n            this.movement.stopMovement();\n            this.attack.stopAttacking();\n        }\n        // 更新缓存的目标，以便下一帧比较\n        this._currentTarget = target;\n    }\n\n    // ... (事件处理: onCharacterDied, onTargetChanged)\n    private onCharacterDied(killer?: Node): void {\n        console.log(`[${this.node.name}] AI received death event. Shutting down.`);\n        this._isActive = false;\n        this.changeState(CharacterState.DEAD);\n        this.movement?.stopMovement();\n        this.attack?.stopAttacking();\n        // 不需要在这里从 SquadManager 移除，节点销毁时会自动移除\n        this.enabled = false;\n    }\n\n    private onTargetChanged(newTarget: ITargetable | null, oldTarget: ITargetable | null): void {\n        console.log(`[${this.node.name}] AI received target changed event. New target: [${newTarget?.getNode()?.name ?? 'None'}]`);\n        // this._currentTarget = newTarget; // 不再需要在这里更新缓存，runSimplePlaceholderLogic 末尾会更新\n        // 简单逻辑下，不需要做太多事，update 会自然处理\n    }\n\n    // ... (状态管理: changeState, getCurrentState)\n    public changeState(newState: CharacterState): void {\n        if (this._currentState === newState || this._currentState === CharacterState.DEAD) return;\n        // log(`[${this.node.name}] AI State Changed: ${CharacterState[this._currentState]} -> ${CharacterState[newState]}`);\n        this._currentState = newState;\n\n        // 根据新状态触发动画事件 (让 CharacterAnimation 监听)\n        switch (newState) {\n            case CharacterState.IDLE:\n                this.node.emit('play-animation', 'idle', true);\n                break;\n            case CharacterState.MOVING:\n                this.node.emit('play-animation', 'run', true);\n                break;\n            case CharacterState.ATTACKING:\n                // 攻击动画由 AttackComponent 在 performAttack 时触发\n                // 这里可以触发一个循环的\"战斗待机\"动画 (如果需要)\n                this.node.emit('play-animation', 'idle', true); // 暂时用 idle 代替\n                break;\n            case CharacterState.CASTING:\n                // 施法动画由 SkillComponent 控制\n                break;\n            case CharacterState.STUNNED:\n                this.node.emit('play-animation', 'hit', true); // 假设有受击/眩晕动画\n                break;\n            case CharacterState.DEAD:\n                // 死亡动画由 HealthComponent 在 handleDeath 时触发\n                break;\n        }\n    }\n\n    // ... (getCurrentState, onDestroy)\n}"]}